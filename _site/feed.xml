<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh" /><updated>2018-03-16T15:58:36+08:00</updated><id>http://localhost:4000/</id><title type="html">浅浅蓝的博客</title><subtitle>一个热爱前端开发的小姑娘
</subtitle><author><name>qishunli</name><email>shunliqi@163.com</email></author><entry><title type="html">栅格化流式布局</title><link href="http://localhost:4000/%E6%A0%85%E6%A0%BC%E5%8C%96/2018/01/09/raster-flow-layout.html" rel="alternate" type="text/html" title="栅格化流式布局" /><published>2018-01-09T00:00:00+08:00</published><updated>2018-01-09T00:00:00+08:00</updated><id>http://localhost:4000/%E6%A0%85%E6%A0%BC%E5%8C%96/2018/01/09/raster-flow-layout</id><content type="html" xml:base="http://localhost:4000/%E6%A0%85%E6%A0%BC%E5%8C%96/2018/01/09/raster-flow-layout.html">&lt;h1 id=&quot;使用方法&quot;&gt;使用方法&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-row&quot;&amp;gt;
    \&amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
    \&amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt;
\&amp;lt;/div&amp;gt;
\&amp;lt;div class=&quot;c-row&quot;&amp;gt;
    \&amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt;
    \&amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt;
\&amp;lt;/div&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;全局样式组件，可直接使用。&lt;/p&gt;

&lt;p&gt;12列栅格系统，由父元素”c-row”及子元素”c-span*“嵌套组成。一个c-row代表一行，若需多行布局，请包裹多个c-row。&lt;/p&gt;

&lt;p&gt;c-row中子元素的盒模型模式为”box-sizing:border-box;”。单独使用”c-row”没有意义，必须结合”c-span”且”c-span”必须为”c-row”的直接子元素。”c-span*“之间的间距采用padding控制，在设置背景色、边框时需设置在子元素上。&lt;/p&gt;

&lt;h3 id=&quot;特殊的1px间隔的栅格系统&quot;&gt;特殊的1px间隔的栅格系统&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-row c-row-tight&quot;&amp;gt;
    &amp;lt;div class=&quot;c-span4&quot;&amp;gt;4n&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c-span4&quot;&amp;gt;4n&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c-span4&quot;&amp;gt;4n&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在需要使用1px间隔的栅格父容器”c-row”上并列添加”c-row-tight”类，即可实现子元素按照1px间隔排布。&lt;/p&gt;

&lt;p&gt;注意：该布局目前仅允许在三联章、四联章图片显示中使用，请勿滥用。&lt;/p&gt;

&lt;h2 id=&quot;栅格系统中边框使用技巧&quot;&gt;栅格系统中边框使用技巧&lt;/h2&gt;
&lt;p&gt;由于”c-row”含有负边距，当栅格系统”c-row”外需要使用边线时，可在”c-row”外再嵌套一层，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-line-top&quot;&amp;gt;
    &amp;lt;div class=&quot;c-row&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于”c-span”盒模型为border-box，当栅格系统”c-span”内需要使用边线时，可在”c-span*“内再嵌套一层，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }

\&amp;lt;div class=&quot;c-row&quot;&amp;gt;
    &amp;lt;div class=&quot;c-span6&quot;&amp;gt;
        &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c-span6&quot;&amp;gt;
        &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;浮动盒模型父元素&quot;&gt;浮动盒模型父元素&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-flexbox&quot; style=&quot;text-align:center;&quot;&amp;gt;
    &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;左-可变宽度&amp;lt;/div&amp;gt;
    &amp;lt;div style=&quot;-webkit-box-flex:0; -webkit-flex:none; background:red;&quot;&amp;gt;中-内容宽度&amp;lt;/div&amp;gt;
    &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;右-可变宽度&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;栅格系统采用浮动盒模型实现，由于该模型在wise开发中经常使用，提供统一的浮动盒模型父元素c-flexbox方便自定义使用。&lt;/p&gt;

&lt;p&gt;注意：子容器情况比较多变，不提供公共样式，自定义样式时需注意包含-webkit-box-flex; -webkit-flex; 分别对应新旧两版盒模型且保证前后顺序。&lt;/p&gt;

&lt;h2 id=&quot;示例代码&quot;&gt;示例代码&lt;/h2&gt;
&lt;h3 id=&quot;流式栅格系统&quot;&gt;流式栅格系统&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-container&quot;&amp;gt;
    &amp;lt;div class=&quot;c-row&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c-row&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c-row&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;在栅格系统中使用边线&quot;&gt;在栅格系统中使用边线&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-container&quot;&amp;gt;
    &amp;lt;div class=&quot;c-line-top&quot;&amp;gt;
        &amp;lt;div class=&quot;c-row&quot;&amp;gt;
            &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-row&quot;&amp;gt;
            &amp;lt;div class=&quot;c-span12&quot;&amp;gt;12n-边线贯穿顶部并与栅格对齐&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&quot;c-row&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span6&quot;&amp;gt;
            &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n-下有边线&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span6&quot;&amp;gt;
            &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n-下有边线&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;特殊的间隔缩紧的栅格样式&quot;&gt;特殊的间隔缩紧的栅格样式&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-container&quot;&amp;gt;
    &amp;lt;div class=&quot;c-row c-row-tight&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span4&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;4n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span4&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;4n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span4&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;4n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c-row c-row-tight&quot;&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;自定义浮动盒模型&quot;&gt;自定义浮动盒模型&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript { .theme-peacock }
\&amp;lt;div class=&quot;c-container&quot;&amp;gt;
    &amp;lt;div class=&quot;c-flexbox&quot; style=&quot;text-align:center;&quot;&amp;gt;
        &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;左-可变宽度&amp;lt;/div&amp;gt;
        &amp;lt;div style=&quot;-webkit-box-flex:0; -webkit-flex:none; background:red;&quot;&amp;gt;中-内容宽度&amp;lt;/div&amp;gt;
        &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;右-可变宽度&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">使用方法 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-row&quot;&amp;gt; \&amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; \&amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt; \&amp;lt;/div&amp;gt; \&amp;lt;div class=&quot;c-row&quot;&amp;gt; \&amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt; \&amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt; \&amp;lt;/div&amp;gt;&quot; 全局样式组件，可直接使用。 12列栅格系统，由父元素”c-row”及子元素”c-span*“嵌套组成。一个c-row代表一行，若需多行布局，请包裹多个c-row。 c-row中子元素的盒模型模式为”box-sizing:border-box;”。单独使用”c-row”没有意义，必须结合”c-span”且”c-span”必须为”c-row”的直接子元素。”c-span*“之间的间距采用padding控制，在设置背景色、边框时需设置在子元素上。 特殊的1px间隔的栅格系统 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-row c-row-tight&quot;&amp;gt; &amp;lt;div class=&quot;c-span4&quot;&amp;gt;4n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span4&quot;&amp;gt;4n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span4&quot;&amp;gt;4n&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 在需要使用1px间隔的栅格父容器”c-row”上并列添加”c-row-tight”类，即可实现子元素按照1px间隔排布。 注意：该布局目前仅允许在三联章、四联章图片显示中使用，请勿滥用。 栅格系统中边框使用技巧 由于”c-row”含有负边距，当栅格系统”c-row”外需要使用边线时，可在”c-row”外再嵌套一层，例如： javascript { .theme-peacock } \&amp;lt;div class=&quot;c-line-top&quot;&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 由于”c-span”盒模型为border-box，当栅格系统”c-span”内需要使用边线时，可在”c-span*“内再嵌套一层，例如： javascript { .theme-peacock } \&amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span6&quot;&amp;gt; &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span6&quot;&amp;gt; &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 浮动盒模型父元素 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-flexbox&quot; style=&quot;text-align:center;&quot;&amp;gt; &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;左-可变宽度&amp;lt;/div&amp;gt; &amp;lt;div style=&quot;-webkit-box-flex:0; -webkit-flex:none; background:red;&quot;&amp;gt;中-内容宽度&amp;lt;/div&amp;gt; &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;右-可变宽度&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 栅格系统采用浮动盒模型实现，由于该模型在wise开发中经常使用，提供统一的浮动盒模型父元素c-flexbox方便自定义使用。 注意：子容器情况比较多变，不提供公共样式，自定义样式时需注意包含-webkit-box-flex; -webkit-flex; 分别对应新旧两版盒模型且保证前后顺序。 示例代码 流式栅格系统 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-container&quot;&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span6&quot;&amp;gt;6n&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 在栅格系统中使用边线 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-container&quot;&amp;gt; &amp;lt;div class=&quot;c-line-top&quot;&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;3n&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span9&quot;&amp;gt;9n&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span12&quot;&amp;gt;12n-边线贯穿顶部并与栅格对齐&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-row&quot;&amp;gt; &amp;lt;div class=&quot;c-span6&quot;&amp;gt; &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n-下有边线&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span6&quot;&amp;gt; &amp;lt;p class=&quot;c-line-bottom&quot;&amp;gt;6n-下有边线&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 特殊的间隔缩紧的栅格样式 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-container&quot;&amp;gt; &amp;lt;div class=&quot;c-row c-row-tight&quot;&amp;gt; &amp;lt;div class=&quot;c-span4&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;4n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span4&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;4n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span4&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;4n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-row c-row-tight&quot;&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;c-span3&quot;&amp;gt;&amp;lt;p style=&quot;background:#ccc&quot;&amp;gt;3n&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 自定义浮动盒模型 javascript { .theme-peacock } \&amp;lt;div class=&quot;c-container&quot;&amp;gt; &amp;lt;div class=&quot;c-flexbox&quot; style=&quot;text-align:center;&quot;&amp;gt; &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;左-可变宽度&amp;lt;/div&amp;gt; &amp;lt;div style=&quot;-webkit-box-flex:0; -webkit-flex:none; background:red;&quot;&amp;gt;中-内容宽度&amp;lt;/div&amp;gt; &amp;lt;div style=&quot;width:40%; -webkit-box-flex:1; -webkit-flex:1 1 auto; background:#ccc;&quot;&amp;gt;右-可变宽度&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;</summary></entry><entry><title type="html">栅格化布局rem布局</title><link href="http://localhost:4000/rem/2017/12/29/raster-layout-rem.html" rel="alternate" type="text/html" title="栅格化布局rem布局" /><published>2017-12-29T00:00:00+08:00</published><updated>2017-12-29T00:00:00+08:00</updated><id>http://localhost:4000/rem/2017/12/29/raster-layout-rem</id><content type="html" xml:base="http://localhost:4000/rem/2017/12/29/raster-layout-rem.html">&lt;h1 id=&quot;rem简介&quot;&gt;REM简介&lt;/h1&gt;
&lt;p&gt;rem是相对于html元素font-size的一个单位。如果html上定义了font-size:100px;，则无论在任何地方都是1rem = 100px。这个大小不会受到父元素的影响。&lt;/p&gt;

&lt;p&gt;我们统一针对不同宽度的设备修改基准font-size值。当遇到需要适应页面大小的元素，都可以使用rem为单位来定义。&lt;/p&gt;

&lt;h1 id=&quot;基准规则&quot;&gt;基准规则&lt;/h1&gt;
&lt;p&gt;|屏幕宽度 | font-size | 典型设备 |
|—| | |
| 大于360px | 100px | ip6/6s/6p |
| 不大于360px | ip4/5/5s | Nexus 5|
定义页面基准font-size为100px，当屏幕宽度小于等于360px时，基准值变为90px，即所有使用rem单位的元素按0.9倍缩小。&lt;/p&gt;

&lt;p&gt;注意：由于rem单位依赖html基础font-size值，因此严禁以任何形式重写html font样式行为！！&lt;/p&gt;

&lt;p&gt;关于为何使用100px
设置100px主要为了方便计算，理论上任意值均可。&lt;/p&gt;

&lt;p&gt;PC chrome有12px最小字号限制，若使用10px会造成pc调试困难从而带来不必要的麻烦。&lt;/p&gt;

&lt;h1 id=&quot;如何使用&quot;&gt;如何使用&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; { .c-rem-box {
    width: 2.5rem;          /* = 250px */
    font-size: 0.14rem;     /* = 14px */
    line-height: 0.3rem;    /* = 30px */
    text-indent: 2em;
    padding: 0.1rem;        /* = 10px */
    background: #ccc;
    box-shadow: 0 0 0.1rem #000;
}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所有需要使用距离单位的地方均可使用rem单位。根据UE图标记的px宽度，按照1rem = 100px换算使用即可。&lt;/p&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">REM简介 rem是相对于html元素font-size的一个单位。如果html上定义了font-size:100px;，则无论在任何地方都是1rem = 100px。这个大小不会受到父元素的影响。 我们统一针对不同宽度的设备修改基准font-size值。当遇到需要适应页面大小的元素，都可以使用rem为单位来定义。 基准规则 |屏幕宽度 | font-size | 典型设备 | |—| | | | 大于360px | 100px | ip6/6s/6p | | 不大于360px | ip4/5/5s | Nexus 5| 定义页面基准font-size为100px，当屏幕宽度小于等于360px时，基准值变为90px，即所有使用rem单位的元素按0.9倍缩小。 注意：由于rem单位依赖html基础font-size值，因此严禁以任何形式重写html font样式行为！！ 关于为何使用100px 设置100px主要为了方便计算，理论上任意值均可。 PC chrome有12px最小字号限制，若使用10px会造成pc调试困难从而带来不必要的麻烦。 如何使用 { .c-rem-box { width: 2.5rem; /* = 250px */ font-size: 0.14rem; /* = 14px */ line-height: 0.3rem; /* = 30px */ text-indent: 2em; padding: 0.1rem; /* = 10px */ background: #ccc; box-shadow: 0 0 0.1rem #000; }} 所有需要使用距离单位的地方均可使用rem单位。根据UE图标记的px宽度，按照1rem = 100px换算使用即可。</summary></entry><entry><title type="html">前端主流运行时库大小</title><link href="http://localhost:4000/%E5%89%8D%E7%AB%AF%E5%BA%93/2017/12/15/fore-end-main-stream-runtime-library.html" rel="alternate" type="text/html" title="前端主流运行时库大小" /><published>2017-12-15T00:00:00+08:00</published><updated>2017-12-15T00:00:00+08:00</updated><id>http://localhost:4000/%E5%89%8D%E7%AB%AF%E5%BA%93/2017/12/15/fore-end-main-stream-runtime-library</id><content type="html" xml:base="http://localhost:4000/%E5%89%8D%E7%AB%AF%E5%BA%93/2017/12/15/fore-end-main-stream-runtime-library.html">&lt;h1 id=&quot;前端主流运行时库大小&quot;&gt;前端主流运行时库大小&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;库&lt;/th&gt;
      &lt;th&gt;版本&lt;/th&gt;
      &lt;th&gt;未压缩&lt;/th&gt;
      &lt;th&gt;压缩&lt;/th&gt;
      &lt;th&gt;star数（2017.4.1）&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;jQuery&lt;/td&gt;
      &lt;td&gt;3.1.1&lt;/td&gt;
      &lt;td&gt;261K&lt;/td&gt;
      &lt;td&gt;85K&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;webpack-zepto&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;55K&lt;/td&gt;
      &lt;td&gt;37K&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vue&lt;/td&gt;
      &lt;td&gt;2.2.1&lt;/td&gt;
      &lt;td&gt;234K&lt;/td&gt;
      &lt;td&gt;74K&lt;/td&gt;
      &lt;td&gt;48803&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;React&lt;/td&gt;
      &lt;td&gt;16.0.0-alpha.6&lt;/td&gt;
      &lt;td&gt;1030K&lt;/td&gt;
      &lt;td&gt;146K&lt;/td&gt;
      &lt;td&gt;63306&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vue-resource&lt;/td&gt;
      &lt;td&gt;1.2.1&lt;/td&gt;
      &lt;td&gt;34K&lt;/td&gt;
      &lt;td&gt;15K&lt;/td&gt;
      &lt;td&gt;4836&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vux&lt;/td&gt;
      &lt;td&gt;2.1.1-rc.14&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;600K&lt;/td&gt;
      &lt;td&gt;7253&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;element-ui&lt;/td&gt;
      &lt;td&gt;1.1.2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;367K&lt;/td&gt;
      &lt;td&gt;10878&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EasyUI&lt;/td&gt;
      &lt;td&gt;1.5.1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;388K&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iView&lt;/td&gt;
      &lt;td&gt;2.0.0-rc.8&lt;/td&gt;
      &lt;td&gt;731K&lt;/td&gt;
      &lt;td&gt;320K&lt;/td&gt;
      &lt;td&gt;5384&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;github-上-start-排名前十的开源项目&quot;&gt;github 上 start 排名前十的开源项目：&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/freeCodeCamp/freeCodeCamp&quot;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap&quot;&gt;bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/d3/d3&quot;&gt;d3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/angular/angular.js&quot;&gt;angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;You-Dont-Know-JS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;airbnb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;react-native&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery&quot;&gt;jquery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/vue&quot;&gt;vue&lt;/a&gt;&lt;/p&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">前端主流运行时库大小 库 版本 未压缩 压缩 star数（2017.4.1） jQuery 3.1.1 261K 85K   webpack-zepto 0.0.1 55K 37K   vue 2.2.1 234K 74K 48803 React 16.0.0-alpha.6 1030K 146K 63306 vue-resource 1.2.1 34K 15K 4836 vux 2.1.1-rc.14   600K 7253 element-ui 1.1.2   367K 10878 EasyUI 1.5.1   388K   iView 2.0.0-rc.8 731K 320K 5384 github 上 start 排名前十的开源项目： freeCodeCamp bootstrap d3 react angular You-Dont-Know-JS airbnb react-native jquery vue</summary></entry><entry><title type="html">移动端测试与调试</title><link href="http://localhost:4000/mobile/2017/12/08/mobile-terminal-test-debugging.html" rel="alternate" type="text/html" title="移动端测试与调试" /><published>2017-12-08T00:00:00+08:00</published><updated>2017-12-08T00:00:00+08:00</updated><id>http://localhost:4000/mobile/2017/12/08/mobile-terminal-test-debugging</id><content type="html" xml:base="http://localhost:4000/mobile/2017/12/08/mobile-terminal-test-debugging.html">&lt;h2 id=&quot;charles代理&quot;&gt;Charles代理&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;下载最新版Charles，建议&lt;code class=&quot;highlighter-rouge&quot;&gt;v3.10.1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy-&amp;gt;Proxy Settings&lt;/code&gt; ，查看&lt;code class=&quot;highlighter-rouge&quot;&gt;port&lt;/code&gt;。确定&lt;code class=&quot;highlighter-rouge&quot;&gt;Enable transparent HTTP proxying&lt;/code&gt; 勾上。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;charles抓包&quot;&gt;Charles抓包&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;HTTP包就直接正常抓&lt;/li&gt;
  &lt;li&gt;HTTPS&lt;/li&gt;
  &lt;li&gt;依次打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy-&amp;gt;SSL Proxying Settings&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;确保&lt;code class=&quot;highlighter-rouge&quot;&gt;Enable SSL Proxying Settings&lt;/code&gt;已经勾选，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Locations&lt;/code&gt;栏输入要抓的域名，如&lt;code class=&quot;highlighter-rouge&quot;&gt;bm.nuomi.com&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;打开手机连接上Charles的代理，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Allow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;依次打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Help-&amp;gt;SSL Proxying-&amp;gt;Install Charles Root Certificate...&lt;/code&gt;，手机访问提示的网址（一般情况是这个地址：http://charlesproxy.com/getssl，可以用二维码扫描访问），安装Charles SSL证书。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;android设备调试&quot;&gt;Android设备调试&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Android设备&lt;code class=&quot;highlighter-rouge&quot;&gt;USB线&lt;/code&gt;连接PC。打开开发者模式&lt;/li&gt;
  &lt;li&gt;开启&lt;code class=&quot;highlighter-rouge&quot;&gt;USB调试模式&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;存储模式中&lt;code class=&quot;highlighter-rouge&quot;&gt;USB计算机连接&lt;/code&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;媒体设备&lt;/code&gt;，不要选择&lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;相机、充电中&lt;/code&gt;&lt;/del&gt;等。&lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;red&quot;&gt;开发者选项中，`选择调试应用`选择要调试的app&lt;/font&gt;
    &lt;p&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;勾选弹出的提示框。&lt;/li&gt;
  &lt;li&gt;Android设备访问PC服务器项目。&lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;red&quot;&gt;让Chrome可以翻墙&lt;/font&gt;
    &lt;p&gt;，第一次这样打开这个调试工具需要翻墙，后续就不用了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;打开Chrome，新开Tab标签，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://inspect&lt;/code&gt;，如下图：
&lt;img src=&quot;http://bos.nj.bpc.baidu.com/v1/agroup/dc4acc57fda015ac5456cb7562bb8071caa5bc8d&quot; alt=&quot;图片&quot; /&gt;
图中从上到下的解释：&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;手机品牌&lt;/li&gt;
  &lt;li&gt;正在调试的app&lt;/li&gt;
  &lt;li&gt;访问的文件地址&lt;/li&gt;
  &lt;li&gt;调试按钮&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;inspect&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;出现&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Developer Tools&lt;/code&gt;的调试页面，然后就可以打断点调试了：
&lt;img src=&quot;http://bos.nj.bpc.baidu.com/v1/agroup/0c720d98e57a42a99dd9e9b3556781c361127b51&quot; alt=&quot;图片&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">Charles代理 下载最新版Charles，建议v3.10.1 打开Proxy-&amp;gt;Proxy Settings ，查看port。确定Enable transparent HTTP proxying 勾上。 Charles抓包 HTTP包就直接正常抓 HTTPS 依次打开Proxy-&amp;gt;SSL Proxying Settings 确保Enable SSL Proxying Settings已经勾选，在Locations栏输入要抓的域名，如bm.nuomi.com、* 打开手机连接上Charles的代理，选择Allow 依次打开Help-&amp;gt;SSL Proxying-&amp;gt;Install Charles Root Certificate...，手机访问提示的网址（一般情况是这个地址：http://charlesproxy.com/getssl，可以用二维码扫描访问），安装Charles SSL证书。 Android设备调试 Android设备USB线连接PC。打开开发者模式 开启USB调试模式。 存储模式中USB计算机连接选择媒体设备，不要选择相机、充电中等。 开发者选项中，`选择调试应用`选择要调试的app 。 勾选弹出的提示框。 Android设备访问PC服务器项目。 让Chrome可以翻墙 ，第一次这样打开这个调试工具需要翻墙，后续就不用了。 打开Chrome，新开Tab标签，输入chrome://inspect，如下图： 图中从上到下的解释： 手机品牌 正在调试的app 访问的文件地址 调试按钮 点击 inspect 出现Google Developer Tools的调试页面，然后就可以打断点调试了：</summary></entry><entry><title type="html">解决两个 Android 模拟器之间无法网络通信的问题</title><link href="http://localhost:4000/android/2017/12/03/tcp-connect-between-android-emulators.html" rel="alternate" type="text/html" title="解决两个 Android 模拟器之间无法网络通信的问题" /><published>2017-12-03T00:00:00+08:00</published><updated>2017-12-03T00:00:00+08:00</updated><id>http://localhost:4000/android/2017/12/03/tcp-connect-between-android-emulators</id><content type="html" xml:base="http://localhost:4000/android/2017/12/03/tcp-connect-between-android-emulators.html">&lt;p&gt;本文解决的是一个小众场景的问题：&lt;/p&gt;

&lt;p&gt;出差在外，需要调试局域网内的两台 Android 设备之间通过 TCP 通信的情况，可手边又不是随时有多台可用的设备，于是想在笔记本上同时跑两台 Android 模拟器来构造调试环境，但是发现它俩的 IP 地址竟然都是 10.0.2.15，场面一度十分尴尬……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/android/ip-address.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;谷狗之后，众多相关的博客和问答贴将我引向了官方文档页面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/run/emulator-networking.html#connecting&quot;&gt;Interconnecting emulator instances&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原来官方指南上解释过相关的知识，现将我关心和以前迷惑的部分翻译摘录如下，如果希望对此有个更全面的了解，还是推荐完整阅读 Android 官方文档里有关 Emulator 的章节 &lt;a href=&quot;https://developer.android.com/studio/run/emulator.html&quot;&gt;https://developer.android.com/studio/run/emulator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先讲一点预备知识，再说解决方案。&lt;/p&gt;

&lt;h2 id=&quot;模拟器的网络地址空间&quot;&gt;模拟器的网络地址空间&lt;/h2&gt;

&lt;p&gt;每个模拟器都运行在一个虚拟路由/防火墙服务后面，这个服务将模拟器和宿主机器的网络接口、配置以及 Internet 隔离开来。对模拟器而言，宿主机器和其它模拟器对它是不可见的，它只知道自己是通过以太网连接到路由/防火墙。&lt;/p&gt;

&lt;p&gt;每个模拟器的虚拟路由管理 10.0.2/24 的网络地址空间，所有地址都是 10.0.2.xx 格式。地址预分配的情况如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;网络地址&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.1&lt;/td&gt;
      &lt;td&gt;路由/网络地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.2&lt;/td&gt;
      &lt;td&gt;宿主机器的 loopback interface，相当于电脑上的 127.0.0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.3&lt;/td&gt;
      &lt;td&gt;首选 DNS Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.4 &lt;br /&gt; 10.0.2.5 &lt;br /&gt; 10.0.2.6&lt;/td&gt;
      &lt;td&gt;可选的第二、第三、第四 DNS Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.15&lt;/td&gt;
      &lt;td&gt;模拟器的网络地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;127.0.0.1&lt;/td&gt;
      &lt;td&gt;模拟器的 loopback interface&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;需要注意的是所有模拟器的网络地址分配都是一样的，这样一来，如果有两个模拟器同时运行在一台电脑上，它们都会有各自的路由，并且给两个模拟器分配的 IP 都是 10.0.2.15。它们被路由隔离，相互不可见。&lt;/p&gt;

&lt;p&gt;另外一点就是模拟器上的 127.0.0.1 是指它自己，所以如果想访问宿主机器上运行的服务，要使用 10.0.2.2。&lt;/p&gt;

&lt;h2 id=&quot;实现两台模拟器之间的通信&quot;&gt;实现两台模拟器之间的通信&lt;/h2&gt;

&lt;p&gt;现在来解决标题和文首提到的问题，主要用到了网络重定向。&lt;/p&gt;

&lt;p&gt;假设开发环境是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PC 是指运行模拟器的宿主电脑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emulator-5554 是模拟器 1，将在 TCP 通信中作为 server 端&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emulator-5556 是模拟器 2，将在 TCP 通信中作为 client 端&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 emulator-5554 上运行 server，侦听 10.0.2.15:58080&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 PC 上运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat ~/.emulator_console_auth_token&lt;/code&gt;，得到一个 token&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 PC 上运行&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; telnet localhost 5554
 auth &amp;lt;token&amp;gt;
 redir add tcp:51212:58080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;token&amp;gt;&lt;/code&gt; 是指第 2 步中得到的 token。&lt;/p&gt;

    &lt;p&gt;51212 是 PC 端口，58080 是 5554 模拟器的端口。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 emulator-5556 上运行 client 程序，连接 10.0.2.2:51212&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此，两台模拟器之间已经可以通过 TCP 愉快地通信了。&lt;/p&gt;

&lt;p&gt;它们之间的网络连接和通信示意图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/android/emulators-communication.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;以上步骤中用到的端口号都是可以根据你的需求替换的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windows 下 telnet 命令默认没有启用，具体启用方法请搜狗一下&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;模拟器的网络限制&quot;&gt;模拟器的网络限制&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;模拟器上运行的 Apps 可以连接到宿主电脑上的网络，但这是通过模拟器间接实现，不是直接连到宿主电脑的网卡。模拟器可以看作是宿主电脑上运行的一个普通程序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为模拟器的特殊网络配置，可能无法支持一些网络协议，比如 ping 命令使用的 ICMP 协议。目前，模拟器不支持 IGMP 和 multicast。&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;试验了一下，模拟器的 shell 里 &lt;code class=&quot;highlighter-rouge&quot;&gt;ping www.sogou.com&lt;/code&gt; 一直卡在那，在手机的 shell 里就可以。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;额外的发现&quot;&gt;额外的发现&lt;/h2&gt;

&lt;p&gt;在阅读 Android 官方文档里关于模拟器的章节时，意外地发现有一节 &lt;a href=&quot;https://developer.android.com/studio/run/emulator-networking.html#calling&quot;&gt;Sending a voice call or SMS to another emulator instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就是说模拟器可以给另外的模拟器打电话和发短信，电话号码就是端口号，比如 emulator-5554 模拟器，电话号码就是 5554，这个号码也可以从模拟器的窗口标题栏上找到，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android Emulator - Nexus_5X_API_19:5554&lt;/code&gt;，里面那个 5554 就是。&lt;/p&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;天下博文，大部分都逃不出官方文档与公开源码的范畴（比如本文就是），而且都是选定文档里讲的某一小部分来进行讲解演绎，这在作为扩展视野、快速上手、快速解决问题等用途时还是比较实用的，但如果想系统、全面地学习，官方文档一般是更好的选择。&lt;/p&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">本文解决的是一个小众场景的问题： 出差在外，需要调试局域网内的两台 Android 设备之间通过 TCP 通信的情况，可手边又不是随时有多台可用的设备，于是想在笔记本上同时跑两台 Android 模拟器来构造调试环境，但是发现它俩的 IP 地址竟然都是 10.0.2.15，场面一度十分尴尬…… 谷狗之后，众多相关的博客和问答贴将我引向了官方文档页面： Interconnecting emulator instances 原来官方指南上解释过相关的知识，现将我关心和以前迷惑的部分翻译摘录如下，如果希望对此有个更全面的了解，还是推荐完整阅读 Android 官方文档里有关 Emulator 的章节 https://developer.android.com/studio/run/emulator.html 首先讲一点预备知识，再说解决方案。 模拟器的网络地址空间 每个模拟器都运行在一个虚拟路由/防火墙服务后面，这个服务将模拟器和宿主机器的网络接口、配置以及 Internet 隔离开来。对模拟器而言，宿主机器和其它模拟器对它是不可见的，它只知道自己是通过以太网连接到路由/防火墙。 每个模拟器的虚拟路由管理 10.0.2/24 的网络地址空间，所有地址都是 10.0.2.xx 格式。地址预分配的情况如下： 网络地址 描述 10.0.2.1 路由/网络地址 10.0.2.2 宿主机器的 loopback interface，相当于电脑上的 127.0.0.1 10.0.2.3 首选 DNS Server 10.0.2.4 10.0.2.5 10.0.2.6 可选的第二、第三、第四 DNS Server 10.0.2.15 模拟器的网络地址 127.0.0.1 模拟器的 loopback interface 需要注意的是所有模拟器的网络地址分配都是一样的，这样一来，如果有两个模拟器同时运行在一台电脑上，它们都会有各自的路由，并且给两个模拟器分配的 IP 都是 10.0.2.15。它们被路由隔离，相互不可见。 另外一点就是模拟器上的 127.0.0.1 是指它自己，所以如果想访问宿主机器上运行的服务，要使用 10.0.2.2。 实现两台模拟器之间的通信 现在来解决标题和文首提到的问题，主要用到了网络重定向。 假设开发环境是： PC 是指运行模拟器的宿主电脑 emulator-5554 是模拟器 1，将在 TCP 通信中作为 server 端 emulator-5556 是模拟器 2，将在 TCP 通信中作为 client 端 配置步骤： 在 emulator-5554 上运行 server，侦听 10.0.2.15:58080 在 PC 上运行 cat ~/.emulator_console_auth_token，得到一个 token 在 PC 上运行 telnet localhost 5554 auth &amp;lt;token&amp;gt; redir add tcp:51212:58080 &amp;lt;token&amp;gt; 是指第 2 步中得到的 token。 51212 是 PC 端口，58080 是 5554 模拟器的端口。 在 emulator-5556 上运行 client 程序，连接 10.0.2.2:51212 至此，两台模拟器之间已经可以通过 TCP 愉快地通信了。 它们之间的网络连接和通信示意图如下： 注： 以上步骤中用到的端口号都是可以根据你的需求替换的 Windows 下 telnet 命令默认没有启用，具体启用方法请搜狗一下 模拟器的网络限制 模拟器上运行的 Apps 可以连接到宿主电脑上的网络，但这是通过模拟器间接实现，不是直接连到宿主电脑的网卡。模拟器可以看作是宿主电脑上运行的一个普通程序。 因为模拟器的特殊网络配置，可能无法支持一些网络协议，比如 ping 命令使用的 ICMP 协议。目前，模拟器不支持 IGMP 和 multicast。 试验了一下，模拟器的 shell 里 ping www.sogou.com 一直卡在那，在手机的 shell 里就可以。 额外的发现 在阅读 Android 官方文档里关于模拟器的章节时，意外地发现有一节 Sending a voice call or SMS to another emulator instance 就是说模拟器可以给另外的模拟器打电话和发短信，电话号码就是端口号，比如 emulator-5554 模拟器，电话号码就是 5554，这个号码也可以从模拟器的窗口标题栏上找到，比如 Android Emulator - Nexus_5X_API_19:5554，里面那个 5554 就是。 后话 天下博文，大部分都逃不出官方文档与公开源码的范畴（比如本文就是），而且都是选定文档里讲的某一小部分来进行讲解演绎，这在作为扩展视野、快速上手、快速解决问题等用途时还是比较实用的，但如果想系统、全面地学习，官方文档一般是更好的选择。</summary></entry><entry><title type="html">Android 源码分析 —— 从 Toast 出发</title><link href="http://localhost:4000/android/2017/11/12/start-from-toast.html" rel="alternate" type="text/html" title="Android 源码分析 —— 从 Toast 出发" /><published>2017-11-12T00:00:00+08:00</published><updated>2017-11-12T00:00:00+08:00</updated><id>http://localhost:4000/android/2017/11/12/start-from-toast</id><content type="html" xml:base="http://localhost:4000/android/2017/11/12/start-from-toast.html">&lt;p&gt;本系列文章在 &lt;a href=&quot;https://github.com/mzlogin/rtfsc-android&quot;&gt;https://github.com/mzlogin/rtfsc-android&lt;/a&gt; 持续更新中，欢迎有兴趣的童鞋们关注。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/android/toast.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（图 from Android Developers）&lt;/p&gt;

&lt;p&gt;Toast 是 Android 开发里较常用的一个类了，有时候用它给用户弹提示信息和界面反馈，有时候用它来作为辅助调试的手段。用得多了，自然想对其表层之下的运行机制有所了解，所以在此将它选为我的第一个 RTFSC Roots。&lt;/p&gt;

&lt;p&gt;本篇采用的记录方式是先对它有个整体的了解，然后提出一些问题，再通过阅读源码，对问题进行一一解读而后得出答案。&lt;/p&gt;

&lt;p&gt;本文使用的工具与源码为：Chrome、插件 insight.io、GitHub 项目 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base&quot;&gt;aosp-mirror/platform_frameworks_base&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;

&lt;!-- vim-markdown-toc GFM --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#toast-印象&quot;&gt;Toast 印象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#提出问题&quot;&gt;提出问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#解答问题&quot;&gt;解答问题&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#toast-的超时时间&quot;&gt;Toast 的超时时间&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#能不能弹一个时间超长的-toast&quot;&gt;能不能弹一个时间超长的 Toast？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#toast-能不能在非-ui-线程调用&quot;&gt;Toast 能不能在非 UI 线程调用？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#应用在后台时能不能-toast&quot;&gt;应用在后台时能不能 Toast？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#toast-数量有没有限制&quot;&gt;Toast 数量有没有限制？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#toastmaketextshow-具体都做了些什么&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.makeText(…).show()&lt;/code&gt; 具体都做了些什么？&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot;&gt;总结&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#补充后的-toast-知识点列表&quot;&gt;补充后的 Toast 知识点列表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#遗留知识点&quot;&gt;遗留知识点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#本篇用到的源码分析方法&quot;&gt;本篇用到的源码分析方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#后话&quot;&gt;后话&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- vim-markdown-toc --&gt;

&lt;h2 id=&quot;toast-印象&quot;&gt;Toast 印象&lt;/h2&gt;

&lt;p&gt;首先我们从 Toast 类的 &lt;a href=&quot;1&quot;&gt;官方文档&lt;/a&gt; 和 &lt;a href=&quot;2&quot;&gt;API 指南&lt;/a&gt; 中可以得出它具备如下特性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 不是 View，它用于帮助创建并展示包含一条小消息的 View；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它的设计理念是尽量不惹眼，但又能展示想让用户看到的信息；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被展示时，浮在应用界面之上；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;永远不会获取到焦点；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大小取决于消息的长度；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;超时后会自动消失；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以自定义显示在屏幕上的位置（默认左右居中显示在靠近屏幕底部的位置）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用自定义布局，也只有在自定义布局的时候才需要直接调用 Toast 的构造方法，其它时候都是使用 makeText 方法来创建 Toast；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 弹出后当前 Activity 会保持可见性和可交互性；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cancel&lt;/code&gt; 方法可以立即将已显示的 Toast 关闭，让未显示的 Toast 不再显示；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 也算是一个「通知」，如果弹出状态消息后期望得到用户响应，应该使用 Notification。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不知道你看到这个列表，是否学到了新知识或者明确了以前不确定的东西，反正我在整理列表的时候是有的。&lt;/p&gt;

&lt;h2 id=&quot;提出问题&quot;&gt;提出问题&lt;/h2&gt;

&lt;p&gt;根据以上特性，再结合平时对 Toast 的使用，提出如下问题来继续本次源码分析之旅（大致由易到难排列，后文用 小 demo 或者源码分析来解答）：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 的超时时间具体是多少？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能不能弹一个时间超长的 Toast？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 能不能在非 UI 线程调用？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用在后台时能不能 Toast？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 数量有没有限制？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.makeText(…).show()&lt;/code&gt; 具体都做了些什么？&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;解答问题&quot;&gt;解答问题&lt;/h2&gt;

&lt;h3 id=&quot;toast-的超时时间&quot;&gt;Toast 的超时时间&lt;/h3&gt;

&lt;p&gt;用这样的一个问题开始「Android 源码分析」，真的好怕被打死……大部分人都会嗤之以鼻：Are you kidding me? So easy. 各位大佬们稍安勿躁，阅读大型源码不是个容易的活，让我们从最简单的开始，一点一点建立自信，将这项伟大的事业进行下去。&lt;/p&gt;

&lt;p&gt;面对这个问题，我的第一反应是去查 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.LENGTH_LONG&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.LENGTH_SHORT&lt;/code&gt; 的值，毕竟平时都是用这两个值来控制显示长/短 Toast 的。&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java&quot;&gt;platform_frameworks_base/core/java/android/widget/Toast.java&lt;/a&gt; 中能看到它们俩的定义是这样的：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Show the view or text notification for a short period of time.  This time
 * could be user-definable.  This is the default.
 * @see #setDuration
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LENGTH_SHORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Show the view or text notification for a long period of time.  This time
 * could be user-definable.
 * @see #setDuration
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LENGTH_LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;啊哦~原来它们只是两个 flag，并非确切的时间值。&lt;/p&gt;

&lt;p&gt;既然是 flag，那自然就会有根据不同的 flag 来设置不同的具体值的地方，于是使用 insight.io 点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_SHORT&lt;/code&gt; 的定义搜索一波 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.LENGTH_SHORT&lt;/code&gt; 的引用，在 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base&quot;&gt;aosp-mirror/platform_frameworks_base&lt;/a&gt; 里一共有 50 处引用，但都是调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.makeText(...)&lt;/code&gt; 时出现的。&lt;/p&gt;

&lt;p&gt;继续搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.LENGTH_LONG&lt;/code&gt; 的引用，在 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base&quot;&gt;aosp-mirror/platform_frameworks_base&lt;/a&gt; 中共出现 42 次，其中有两处长得像是我们想找的：&lt;/p&gt;

&lt;p&gt;第一处，文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java&quot;&gt;platform_frameworks_base/core/java/android/widget/Toast.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TN&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITransientNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Stub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHORT_DURATION_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LONG_DURATION_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleShow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hideTimeoutMilliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LONG_DURATION_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHORT_DURATION_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个 hideTimeoutMilliseconds 是干嘛的呢？&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/WindowManager.java&quot;&gt;platform_frameworks_base/core/java/android/view/WindowManager.java&lt;/a&gt; 里能看到这个&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * ...
 * ...                                        . Therefore, we do hide
 * such windows to prevent them from overlaying other apps.
 *
 * @hide
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hideTimeoutMilliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 GitHub 用 blame 查看到改动这一行的最近一次提交 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/commit/aa07653d2eea38a7a5bda5944c8a353586916ae9&quot;&gt;aa07653d&lt;/a&gt;，它的 commit message 能表明它的用途：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Prevent apps to overlay other apps via toast windows

It was possible for apps to put toast type windows
that overlay other apps which toast winodws aren't
removed after a timeout.

Now for apps targeting SDK greater than N MR1 to add a
toast window one needs to have a special token. The token
is added by the notificatoion manager service only for
the lifetime of the shown toast and is then removed
including all windows associated with this token. This
prevents apps to add arbitrary toast windows.

Since legacy apps may rely on the ability to directly
add toasts we mitigate by allowing these apps to still
add such windows for unlimited duration if this app is
the currently focused one, i.e. the user interacts with
it then it can overlay itself, otherwise we make sure
these toast windows are removed after a timeout like
a toast would be.

We don't allow more that one toast window per UID being
added at a time which prevents 1) legacy apps to put the
same toast after a timeout to go around our new policy
of hiding toasts after a while; 2) modern apps to reuse
the passed token to add more than one window; Note that
the notification manager shows toasts one at a time.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它并不是用来控制 Toast 的显示时间的，只是为了防止有些应用的 toast 类型的窗口长期覆盖在别的应用上面，而超时自动隐藏这些窗口的时间，可以看作是一种防护措施。&lt;/p&gt;

&lt;p&gt;第二处，文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/services/core/java/com/android/server/notification/NotificationManagerService.java&quot;&gt;platform_frameworks_base/services/core/java/com/android/server/notification/NotificationManagerService.java&lt;/a&gt; 里&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LONG_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHORT_DELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在同一文件里能找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;LONG_DELAY&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;SHORT_DELAY&lt;/code&gt; 的定义：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LONG_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneWindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TOAST_WINDOW_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHORT_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2 seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;点击查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhoneWindowManager.TOAST_WINDOW_TIMEOUT&lt;/code&gt; 的定义：&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/services/core/java/com/android/server/policy/PhoneWindowManager.java&quot;&gt;platform_frameworks_base/services/core/java/com/android/server/policy/PhoneWindowManager.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** Amount of time (in milliseconds) a toast window can be shown. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOAST_WINDOW_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.5 seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;至此，我们可以得出 &lt;strong&gt;结论：Toast 的长/短超时时间分别为 3.5 秒和 2 秒。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tips: 也可以通过分析代码里的逻辑，一层一层追踪用到 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_SHORT&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_LONG&lt;/code&gt; 的地方，最终得出结论，而这里是根据一些合理推断来简化追踪过程，更快达到目标，这在一些场景下是可取和必要的。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;能不能弹一个时间超长的-toast&quot;&gt;能不能弹一个时间超长的 Toast？&lt;/h3&gt;

&lt;p&gt;注：这里探讨的是能否直接通过 Toast 提供的公开 API 做到，网络上能搜索到的使用 Timer、反射、自定义等方式达到弹出一个超长时间 Toast 目的的方法不在讨论范围内。&lt;/p&gt;

&lt;p&gt;我们在 Toast 类的源码里看一下跟设置时长相关的代码：&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java&quot;&gt;platform_frameworks_base/core/java/android/widget/Toast.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** @hide */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@IntDef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Set how long to show the view for.
     * @see #LENGTH_SHORT
     * @see #LENGTH_LONG
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Duration&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mTN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Make a standard toast that just contains a text view.
     *
     * @param context  The context to use.  Usually your {@link android.app.Application}
     *                 or {@link android.app.Activity} object.
     * @param text     The text to show.  Can be formatted text.
     * @param duration How long to display the message.  Either {@link #LENGTH_SHORT} or
     *                 {@link #LENGTH_LONG}
     *
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Duration&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实从上面 &lt;code class=&quot;highlighter-rouge&quot;&gt;setDuration&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;makeText&lt;/code&gt; 的注释已经可以看出，duration 只能取值 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_SHORT&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_LONG&lt;/code&gt;，除了注释之外，还使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Duration&lt;/code&gt; 注解来保证此事。&lt;code class=&quot;highlighter-rouge&quot;&gt;Duration&lt;/code&gt; 自身使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;@IntDef&lt;/code&gt; 注解，它用于限制可以取的值。&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/annotation/IntDef.java&quot;&gt;platform_frameworks_base/core/java/android/annotation/IntDef.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Denotes that the annotated element of integer type, represents
 * a logical type and that its value should be one of the explicitly
 * named constants. If the {@link #flag()} attribute is set to true,
 * multiple constants can be combined.
 * ...
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不信邪的我们可以快速在一个 demo Android 工程里写一句这样的代码试试：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Android Studio 首先就不会同意，警告你 &lt;code class=&quot;highlighter-rouge&quot;&gt;Must be one of: Toast.LENGTH_SHORT, Toast.LENGTH_LONG&lt;/code&gt;，但实际这段代码是可以通过编译的，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Duration&lt;/code&gt; 注解的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Retention&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;RetentionPolicy.SOURCE&lt;/code&gt;，我的理解是该注解主要能用于 IDE 的智能提示警告，编译期就被丢掉了。&lt;/p&gt;

&lt;p&gt;但即使 duration 能传入 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_SHORT&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_LONG&lt;/code&gt; 以外的值，也并没有什么卵用，别忘了这里设置的只是一个 flag，真正计算的时候是 &lt;code class=&quot;highlighter-rouge&quot;&gt;long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;&lt;/code&gt;，即 duration 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH_LONG&lt;/code&gt; 时时长为 3.5 秒，其它情况都是 2 秒。&lt;/p&gt;

&lt;p&gt;所以我们可以得出 &lt;strong&gt;结论：无法通过 Toast 提供的公开 API 直接弹出超长时间的 Toast。&lt;/strong&gt;（如节首所述，可以通过一些其它方式实现类似的效果）&lt;/p&gt;

&lt;h3 id=&quot;toast-能不能在非-ui-线程调用&quot;&gt;Toast 能不能在非 UI 线程调用？&lt;/h3&gt;

&lt;p&gt;这个问题适合用一个 demo 来解答。&lt;/p&gt;

&lt;p&gt;我们创建一个最简单的 App 工程，然后在启动 Activity 的 onCreate 方法里添加这样一段代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call toast on non-UI thread&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;啊哦~很遗憾程序直接挂掉了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11-07 13:35:33.980 2020-2035/org.mazhuang.androiduidemos E/AndroidRuntime: FATAL EXCEPTION: Thread-77
    java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()
        at android.widget.Toast$TN.&amp;lt;init&amp;gt;(Toast.java:390)
        at android.widget.Toast.&amp;lt;init&amp;gt;(Toast.java:114)
        at android.widget.Toast.makeText(Toast.java:277)
        at android.widget.Toast.makeText(Toast.java:267)
        at org.mazhuang.androiduidemos.MainActivity$1.run(MainActivity.java:27)
        at java.lang.Thread.run(Thread.java:856)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;顺着堆栈里显示的方法调用从下往上一路看过去，&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java&quot;&gt;platform_frameworks_base/core/java/android/widget/Toast.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先是两级 makeText 方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 我们的代码里调用的 makeText 方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Duration&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 隐藏的 makeText 方法，不能手动调用&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Duration&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里的 looper 为 null&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后到了 Toast 的构造方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// looper 为 null&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到 Toast$TN 的构造方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// looper = null&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Use Looper.myLooper() if looper is not specified.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;Can't toast on a thread that has not called Looper.prepare()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此，我们已经追踪到了我们的崩溃的 RuntimeException，即要避免进入抛出异常的逻辑，要么调用的时候传递一个 Looper 进来（无法直接实现，能传递 Looper 参数的构造方法与 makeText 方法是 hide 的），要么 &lt;code class=&quot;highlighter-rouge&quot;&gt;Looper.myLooper()&lt;/code&gt; 返回不为 null，提示信息 &lt;code class=&quot;highlighter-rouge&quot;&gt;Can't create handler inside thread that has not called Looper.prepare()&lt;/code&gt; 里给出了方法，那我们在 toast 前面加一句 &lt;code class=&quot;highlighter-rouge&quot;&gt;Looper.prepare()&lt;/code&gt; 试试？这次不崩溃了，但依然不弹出 Toast，毕竟，这个线程在调用完 &lt;code class=&quot;highlighter-rouge&quot;&gt;show()&lt;/code&gt; 方法后就直接结束了，没有调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Looper.loop()&lt;/code&gt;，至于为什么调用 Toast 的线程结束与否会对 Toast 的显示隐藏等起影响，在本文的后面的章节里会进行分析。&lt;/p&gt;

&lt;p&gt;从崩溃提示来看，Android 并没有限制在非 UI 线程里使用 Toast，只是线程得是一个有 Looper 的线程。于是我们尝试构造如下代码，发现可以成功从非 UI 线程弹出 toast 了：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG_TOAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG_QUIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;MSG_TOAST:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call toast on non-UI thread&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;sendEmptyMessageDelayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSG_QUIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;MSG_QUIT:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendEmptyMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSG_TOAST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至于为什么 &lt;code class=&quot;highlighter-rouge&quot;&gt;sendEmptyMesageDelayed(MSG_QUIT, 4000)&lt;/code&gt; 里的 delayMillis 我设成了 4000，这里卖个关子，感兴趣的同学可以把这个值调成 0、1000 等等看一下效果，会有一些意想不到的情况发生。&lt;/p&gt;

&lt;p&gt;到此，我们可以得出 &lt;strong&gt;结论：可以在非 UI 线程里调用 Toast，但是得是一个有 Looper 的线程。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ps. 上面这一段演示代码让人感觉为了弹出一个 Toast 好麻烦，也可以采用 Activity.runOnUiThread、View.post 等方法从非 UI 线程将逻辑切换到 UI 线程里执行，直接从 UI 线程里弹出，UI 线程是有 Looper 的。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;知识点：这里如果对 Looper、Handler 和 MessageQueue 有所了解，就容易理解多了，预计下一篇对这三剑客进行讲解。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;应用在后台时能不能-toast&quot;&gt;应用在后台时能不能 Toast？&lt;/h3&gt;

&lt;p&gt;这个问题也比较适合用一个简单的 demo 来尝试回答。&lt;/p&gt;

&lt;p&gt;在 MainActivity 的 onCreate 里加上这样一段代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postDelayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;background toast&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后待应用启动后按 HOME 键，等几秒看是否能弹出该 Toast 即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结论是：应用在后台时可以弹出 Toast。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;toast-数量有没有限制&quot;&gt;Toast 数量有没有限制？&lt;/h3&gt;

&lt;p&gt;这个问题将在下一节中一并解答。&lt;/p&gt;

&lt;h3 id=&quot;toastmaketextshow-具体都做了些什么&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.makeText(…).show()&lt;/code&gt; 具体都做了些什么？&lt;/h3&gt;

&lt;p&gt;首先看一下 makeText 方法。&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java&quot;&gt;platform_frameworks_base/core/java/android/widget/Toast.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Make a standard toast to display using the specified looper.
 * If looper is null, Looper.myLooper() is used.
 * @hide
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Duration&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LayoutInflater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inflate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAYOUT_INFLATER_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transient_notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mNextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个方法里就是构造了一个 Toast 对象，将需要展示的 View 准备好，设置好超时时长标记，我们可以看一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;com.android.internal.R.layout.transient_notification&lt;/code&gt; 这个布局的内容：&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/res/res/layout/transient_notification.xml&quot;&gt;platform_frameworks_base/core/res/res/layout/transient_notification.xml&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertical&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?android:attr/toastFrameBackground&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@android:id/message&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_weight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_marginHorizontal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24dp&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_marginVertical=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;15dp&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_horizontal&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textAppearance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/TextAppearance.Toast&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/primary_text_default_material_light&quot;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们最常见的 Toast 就是从这个布局文件渲染出来的了。&lt;/p&gt;

&lt;p&gt;我们继续看一下 makeText 里调用的 Toast 的构造方法里做了哪些事情：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Constructs an empty Toast object.  If looper is null, Looper.myLooper() is used.
 * @hide
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDimensionPixelSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dimen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toast_y_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mGravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config_toastDefaultGravity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要就是构造了一个 TN 对象，计算了位置。&lt;/p&gt;

&lt;p&gt;TN 的构造方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// XXX This should be changed to use a Dialog, with a Theme.Toast&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// defined that sets up the layout params appropriately.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PixelFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRANSLUCENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowAnimations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Animation_Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE_TOAST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toast&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_KEEP_SCREEN_ON&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_NOT_FOCUSABLE&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_NOT_TOUCHABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mPackageName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Use Looper.myLooper() if looper is not specified.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;Can't toast on a thread that has not called Looper.prepare()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置了 LayoutParams 的初始值，在后面 show 的时候会用到，设置了包名和 Looper、Handler。&lt;/p&gt;

&lt;p&gt;TN 是 App 中用于与 Notification Service 交互的对象，这里涉及到 Binder 和跨进程通信的知识，这块会在后面开新篇来讲解，这里可以简单地理解一下：Notification Service 是系统为了管理各种 App 的 Notification（包括 Toast）的服务，比如 Toast，由这个服务来统一维护一个待展示 Toast 队列，各 App 需要弹 Toast 的时候就将相关信息发送给这个服务，服务会将其加入队列，然后根据队列的情况，依次通知各 App 展示和隐藏 Toast。&lt;/p&gt;

&lt;p&gt;接下来看看 show 方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Show the view for the specified duration.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mNextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;setView must have been called&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;INotificationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOpPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mNextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mNextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enqueueToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Empty&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用了 INotificationManager 的 enqueueToast 方法，INotificationManager 是一个接口，其实现类在 NotificationManagerService 里，我们来看 enqueueToast 方法的实现：&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/services/core/java/com/android/server/notification/NotificationManagerService.java&quot;&gt;platform_frameworks_base/services/core/java/com/android/server/notification/NotificationManagerService.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enqueueToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITransientNotification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexOfToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If it's already in the queue, we update it in place, we don't&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// move it to the end of the queue.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Limit the number of toasts that any given package except the android&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// package can enqueue.  Prevents DOS attacks and deals with leaks.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSystemToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                         &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PACKAGE_NOTIFICATIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;Slog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Package has already posted &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
                                        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; toasts. Not showing more. Package=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Binder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mWindowManagerInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addWindowToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE_TOAST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callingPid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;keepProcessAliveIfNeededLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callingPid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If it's at index 0, it's the current toast.  It doesn't matter if it's&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// new or just been updated.  Call back and tell it to show itself.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If the callback fails, this will remove it from the list, so don't&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// assume that it's valid after this.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;showNextToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restoreCallingIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要就是使用调用方传来的包名、callback 和 duration 构造一个 ToastRecord，然后添加到 mToastQueue 中。如果在 mToastQueue 中已经存在该包名和 callback 的 Toast，则只更新其 duration。&lt;/p&gt;

&lt;p&gt;这段代码里有一段可以回答我们的上一个问题 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toast 数量有没有限制&lt;/code&gt; 了：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Limit the number of toasts that any given package except the android&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// package can enqueue.  Prevents DOS attacks and deals with leaks.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSystemToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PACKAGE_NOTIFICATIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;Slog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Package has already posted &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; toasts. Not showing more. Package=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即会计算 mToastQueue 里该包名的 Toast 数量，如果超过 50，则将当前申请加入队列的 Toast 抛弃掉。所以上一个问题的 &lt;strong&gt;结论是：Toast 队列里允许每个应用存在不超过 50 个 Toast。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那么构造 ToastRecord 并加入 mToastQueue 之后是如何调度，控制显示和隐藏的呢？enqueueToast 方法里有个逻辑是如果当前列表里只有一个 ToastRecord，则调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;showNextToastLocked&lt;/code&gt;，看一下与该方法相关的代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GuardedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mToastQueue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showNextToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scheduleTimeoutLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@GuardedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mToastQueue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scheduleTimeoutLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeCallbacksAndMessages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obtain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LONG_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHORT_DELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendMessageDelayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Slog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Timeout pkg=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; callback=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexOfToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cancelToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@GuardedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mToastQueue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancelToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastToast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWindowManagerInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeWindowToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;keepProcessAliveIfNeededLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mToastQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Show the next one. If the callback fails, this will remove&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// it from the list, so don't assume that the list hasn't changed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// after this point.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;showNextToastLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 继续显示队列里的下一个 Toast&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorkerHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;MESSAGE_TIMEOUT:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;handleTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToastRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即首先调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;record.callback.show(record.token)&lt;/code&gt;，通知 App 展示该 Toast，然后根据 duration，延时发送一条超时消息 &lt;code class=&quot;highlighter-rouge&quot;&gt;MESSAGE_TIMEOUT&lt;/code&gt;，WorkHandler 收到该消息后，调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cancelToastLocked&lt;/code&gt; 通知应用隐藏该 Toast，并继续调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;showNextToastLocked&lt;/code&gt; 显示队列里的下一个 Toast。这样一个机制就保证了只要队列里有 ToastRecord，就能依次显示出来。&lt;/p&gt;

&lt;p&gt;机制弄清楚了，再详细看一下应用接到通知 show 和 hide 一个 Toast 后是怎么做的：&lt;/p&gt;

&lt;p&gt;文件 &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java&quot;&gt;platform_frameworks_base/core/java/android/widget/Toast.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TN&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITransientNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Stub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SHOW:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;handleShow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;HIDE:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;handleHide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * schedule handleShow into the right thread
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localLOGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SHOW: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obtainMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendToTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * schedule handleHide into the right thread
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localLOGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HIDE: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obtainMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendToTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleShow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mWM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleHide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mWM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeViewImmediate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示过程：show 方法被远程调用后，先是发送了一个 SHOW 消息，接收到该消息后调用了 handleShow 方法，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;mWM.addView&lt;/code&gt; 将该 View 添加到窗口。&lt;/p&gt;

&lt;p&gt;隐藏过程：hide 方法被远程调用后，先是发送了一个 HIDE 消息，接收到该消息后调用了 handleHide 方法，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;mWM.removeViewImmediate&lt;/code&gt; 将该 View 从窗口移除。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这里插播一条结论，就是前文留下的为什么调用 Toast 的线程线束之后没弹出的 Toast 就无法弹出了的问题，因为 Notification Service 通知应用进程显示或隐藏 Toast 时，使用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;mHandler.obtainMessage(SHOW).sendToTarget()&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;mHandler.obtainMessage(HIDE).sendToTarget()&lt;/code&gt;，这个消息发出去后，Handler 对应线程没有在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Looper.loop()&lt;/code&gt; 过程里的话，就没有办法进入到 Handler 的 handleMessage 方法里去，自然也就无法调用显示和隐藏 View 的流程了。&lt;code class=&quot;highlighter-rouge&quot;&gt;Looper.loop()&lt;/code&gt; 相关的知识点将在下篇讲解。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;h3 id=&quot;补充后的-toast-知识点列表&quot;&gt;补充后的 Toast 知识点列表&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 不是 View，它用于帮助创建并展示包含一条小消息的 View；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它的设计理念是尽量不惹眼，但又能展示想让用户看到的信息；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被展示时，浮在应用界面之上；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;永远不会获取到焦点；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大小取决于消息的长度；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;超时后会自动消失；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以自定义显示在屏幕上的位置（默认左右居中显示在靠近屏幕底部的位置）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用自定义布局，也只有在自定义布局的时候才需要直接调用 Toast 的构造方法，其它时候都是使用 makeText 方法来创建 Toast；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 弹出后当前 Activity 会保持可见性和可交互性；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cancel&lt;/code&gt; 方法可以立即将已显示的 Toast 关闭，让未显示的 Toast 不再显示；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 也算是一个「通知」，如果弹出状态消息后期望得到用户响应，应该使用 Notification；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 的超时时间为 LENGTH_SHORT 对应 2 秒，LENGTH_LONG 对应 3.5 秒；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不能通过 Toast 类的公开方法直接弹一个时间超长的 Toast；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用在后台时可以调用 Toast 并正常弹出；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Toast 队列里允许单个应用往里添加 50 个 Toast，超出的将被丢弃。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;遗留知识点&quot;&gt;遗留知识点&lt;/h3&gt;

&lt;p&gt;本篇涉及到了一些需要进一步了解的知识点，在后续的篇章中会依次解读：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Handler、Looper 和 MessageQueue&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WindowManager&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Binder 与跨进程通信&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;本篇用到的源码分析方法&quot;&gt;本篇用到的源码分析方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;查找关键变量被引用的地方；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按方法调用堆栈一层层逻辑跟踪与分析；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 git blame 查看关键代码行的变更日志；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;到此，上面提到的几个问题都已经解答完毕，对 Toast 源码的分析也告一段落。&lt;/p&gt;

&lt;p&gt;写这篇文章花费的时间比较长，所以并不能按照预计的节奏更新，这里表示抱歉。另外，各位如果有耐心读到这里，觉得本文的思路是否清晰，是否能跟随文章的节奏理解一些东西？因为我也在摸索写这类文章的组织形式，所以也希望能收到反馈和建议，以作改进，先行谢过。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，照例要安利一下我的微信公众号「闷骚的程序员」，扫码关注，接收 rtfsc-android 的最近更新。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;192px&quot; height=&quot;192px&quot; src=&quot;http://mazhuang.org/assets/images/qrcode.jpg&quot; /&gt;&lt;/div&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">本系列文章在 https://github.com/mzlogin/rtfsc-android 持续更新中，欢迎有兴趣的童鞋们关注。 （图 from Android Developers） Toast 是 Android 开发里较常用的一个类了，有时候用它给用户弹提示信息和界面反馈，有时候用它来作为辅助调试的手段。用得多了，自然想对其表层之下的运行机制有所了解，所以在此将它选为我的第一个 RTFSC Roots。 本篇采用的记录方式是先对它有个整体的了解，然后提出一些问题，再通过阅读源码，对问题进行一一解读而后得出答案。 本文使用的工具与源码为：Chrome、插件 insight.io、GitHub 项目 aosp-mirror/platform_frameworks_base 目录 Toast 印象 提出问题 解答问题 Toast 的超时时间 能不能弹一个时间超长的 Toast？ Toast 能不能在非 UI 线程调用？ 应用在后台时能不能 Toast？ Toast 数量有没有限制？ Toast.makeText(…).show() 具体都做了些什么？ 总结 补充后的 Toast 知识点列表 遗留知识点 本篇用到的源码分析方法 后话 Toast 印象 首先我们从 Toast 类的 官方文档 和 API 指南 中可以得出它具备如下特性： Toast 不是 View，它用于帮助创建并展示包含一条小消息的 View； 它的设计理念是尽量不惹眼，但又能展示想让用户看到的信息； 被展示时，浮在应用界面之上； 永远不会获取到焦点； 大小取决于消息的长度； 超时后会自动消失； 可以自定义显示在屏幕上的位置（默认左右居中显示在靠近屏幕底部的位置）； 可以使用自定义布局，也只有在自定义布局的时候才需要直接调用 Toast 的构造方法，其它时候都是使用 makeText 方法来创建 Toast； Toast 弹出后当前 Activity 会保持可见性和可交互性； 使用 cancel 方法可以立即将已显示的 Toast 关闭，让未显示的 Toast 不再显示； Toast 也算是一个「通知」，如果弹出状态消息后期望得到用户响应，应该使用 Notification。 不知道你看到这个列表，是否学到了新知识或者明确了以前不确定的东西，反正我在整理列表的时候是有的。 提出问题 根据以上特性，再结合平时对 Toast 的使用，提出如下问题来继续本次源码分析之旅（大致由易到难排列，后文用 小 demo 或者源码分析来解答）： Toast 的超时时间具体是多少？ 能不能弹一个时间超长的 Toast？ Toast 能不能在非 UI 线程调用？ 应用在后台时能不能 Toast？ Toast 数量有没有限制？ Toast.makeText(…).show() 具体都做了些什么？ 解答问题 Toast 的超时时间 用这样的一个问题开始「Android 源码分析」，真的好怕被打死……大部分人都会嗤之以鼻：Are you kidding me? So easy. 各位大佬们稍安勿躁，阅读大型源码不是个容易的活，让我们从最简单的开始，一点一点建立自信，将这项伟大的事业进行下去。 面对这个问题，我的第一反应是去查 Toast.LENGTH_LONG 和 Toast.LENGTH_SHORT 的值，毕竟平时都是用这两个值来控制显示长/短 Toast 的。 文件 platform_frameworks_base/core/java/android/widget/Toast.java 中能看到它们俩的定义是这样的： /** * Show the view or text notification for a short period of time. This time * could be user-definable. This is the default. * @see #setDuration */ public static final int LENGTH_SHORT = 0; /** * Show the view or text notification for a long period of time. This time * could be user-definable. * @see #setDuration */ public static final int LENGTH_LONG = 1; 啊哦~原来它们只是两个 flag，并非确切的时间值。 既然是 flag，那自然就会有根据不同的 flag 来设置不同的具体值的地方，于是使用 insight.io 点击 LENGTH_SHORT 的定义搜索一波 Toast.LENGTH_SHORT 的引用，在 aosp-mirror/platform_frameworks_base 里一共有 50 处引用，但都是调用 Toast.makeText(...) 时出现的。 继续搜索 Toast.LENGTH_LONG 的引用，在 aosp-mirror/platform_frameworks_base 中共出现 42 次，其中有两处长得像是我们想找的： 第一处，文件 platform_frameworks_base/core/java/android/widget/Toast.java private static class TN extends ITransientNotification.Stub { ... static final long SHORT_DURATION_TIMEOUT = 4000; static final long LONG_DURATION_TIMEOUT = 7000; ... public void handleShow(IBinder windowToken) { ... mParams.hideTimeoutMilliseconds = mDuration == Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT; ... } ... } 这个 hideTimeoutMilliseconds 是干嘛的呢？ 文件 platform_frameworks_base/core/java/android/view/WindowManager.java 里能看到这个 /** * ... * ... . Therefore, we do hide * such windows to prevent them from overlaying other apps. * * @hide */ public long hideTimeoutMilliseconds = -1; 在 GitHub 用 blame 查看到改动这一行的最近一次提交 aa07653d，它的 commit message 能表明它的用途： Prevent apps to overlay other apps via toast windows It was possible for apps to put toast type windows that overlay other apps which toast winodws aren't removed after a timeout. Now for apps targeting SDK greater than N MR1 to add a toast window one needs to have a special token. The token is added by the notificatoion manager service only for the lifetime of the shown toast and is then removed including all windows associated with this token. This prevents apps to add arbitrary toast windows. Since legacy apps may rely on the ability to directly add toasts we mitigate by allowing these apps to still add such windows for unlimited duration if this app is the currently focused one, i.e. the user interacts with it then it can overlay itself, otherwise we make sure these toast windows are removed after a timeout like a toast would be. We don't allow more that one toast window per UID being added at a time which prevents 1) legacy apps to put the same toast after a timeout to go around our new policy of hiding toasts after a while; 2) modern apps to reuse the passed token to add more than one window; Note that the notification manager shows toasts one at a time. 它并不是用来控制 Toast 的显示时间的，只是为了防止有些应用的 toast 类型的窗口长期覆盖在别的应用上面，而超时自动隐藏这些窗口的时间，可以看作是一种防护措施。 第二处，文件 platform_frameworks_base/services/core/java/com/android/server/notification/NotificationManagerService.java 里 long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY; 在同一文件里能找到 LONG_DELAY 与 SHORT_DELAY 的定义： static final int LONG_DELAY = PhoneWindowManager.TOAST_WINDOW_TIMEOUT; static final int SHORT_DELAY = 2000; // 2 seconds 点击查看 PhoneWindowManager.TOAST_WINDOW_TIMEOUT 的定义： 文件 platform_frameworks_base/services/core/java/com/android/server/policy/PhoneWindowManager.java /** Amount of time (in milliseconds) a toast window can be shown. */ public static final int TOAST_WINDOW_TIMEOUT = 3500; // 3.5 seconds 至此，我们可以得出 结论：Toast 的长/短超时时间分别为 3.5 秒和 2 秒。 Tips: 也可以通过分析代码里的逻辑，一层一层追踪用到 LENGTH_SHORT 和 LENGTH_LONG 的地方，最终得出结论，而这里是根据一些合理推断来简化追踪过程，更快达到目标，这在一些场景下是可取和必要的。 能不能弹一个时间超长的 Toast？ 注：这里探讨的是能否直接通过 Toast 提供的公开 API 做到，网络上能搜索到的使用 Timer、反射、自定义等方式达到弹出一个超长时间 Toast 目的的方法不在讨论范围内。 我们在 Toast 类的源码里看一下跟设置时长相关的代码： 文件 platform_frameworks_base/core/java/android/widget/Toast.java ... /** @hide */ @IntDef({LENGTH_SHORT, LENGTH_LONG}) @Retention(RetentionPolicy.SOURCE) public @interface Duration {} ... /** * Set how long to show the view for. * @see #LENGTH_SHORT * @see #LENGTH_LONG */ public void setDuration(@Duration int duration) { mDuration = duration; mTN.mDuration = duration; } ... /** * Make a standard toast that just contains a text view. * * @param context The context to use. Usually your {@link android.app.Application} * or {@link android.app.Activity} object. * @param text The text to show. Can be formatted text. * @param duration How long to display the message. Either {@link #LENGTH_SHORT} or * {@link #LENGTH_LONG} * */ public static Toast makeText(Context context, CharSequence text, @Duration int duration) { return makeText(context, null, text, duration); } ... 其实从上面 setDuration 和 makeText 的注释已经可以看出，duration 只能取值 LENGTH_SHORT 和 LENGTH_LONG，除了注释之外，还使用了 @Duration 注解来保证此事。Duration 自身使用了 @IntDef 注解，它用于限制可以取的值。 文件 platform_frameworks_base/core/java/android/annotation/IntDef.java /** * Denotes that the annotated element of integer type, represents * a logical type and that its value should be one of the explicitly * named constants. If the {@link #flag()} attribute is set to true, * multiple constants can be combined. * ... */ 不信邪的我们可以快速在一个 demo Android 工程里写一句这样的代码试试： Toast.makeText(this, &quot;Hello&quot;, 2); Android Studio 首先就不会同意，警告你 Must be one of: Toast.LENGTH_SHORT, Toast.LENGTH_LONG，但实际这段代码是可以通过编译的，因为 Duration 注解的 Retention 为 RetentionPolicy.SOURCE，我的理解是该注解主要能用于 IDE 的智能提示警告，编译期就被丢掉了。 但即使 duration 能传入 LENGTH_SHORT 和 LENGTH_LONG 以外的值，也并没有什么卵用，别忘了这里设置的只是一个 flag，真正计算的时候是 long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;，即 duration 为 LENGTH_LONG 时时长为 3.5 秒，其它情况都是 2 秒。 所以我们可以得出 结论：无法通过 Toast 提供的公开 API 直接弹出超长时间的 Toast。（如节首所述，可以通过一些其它方式实现类似的效果） Toast 能不能在非 UI 线程调用？ 这个问题适合用一个 demo 来解答。 我们创建一个最简单的 App 工程，然后在启动 Activity 的 onCreate 方法里添加这样一段代码： new Thread(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, &quot;Call toast on non-UI thread&quot;, Toast.LENGTH_SHORT) .show(); } }).start(); 啊哦~很遗憾程序直接挂掉了。 11-07 13:35:33.980 2020-2035/org.mazhuang.androiduidemos E/AndroidRuntime: FATAL EXCEPTION: Thread-77 java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare() at android.widget.Toast$TN.&amp;lt;init&amp;gt;(Toast.java:390) at android.widget.Toast.&amp;lt;init&amp;gt;(Toast.java:114) at android.widget.Toast.makeText(Toast.java:277) at android.widget.Toast.makeText(Toast.java:267) at org.mazhuang.androiduidemos.MainActivity$1.run(MainActivity.java:27) at java.lang.Thread.run(Thread.java:856) 顺着堆栈里显示的方法调用从下往上一路看过去， 文件 platform_frameworks_base/core/java/android/widget/Toast.java 首先是两级 makeText 方法： // 我们的代码里调用的 makeText 方法 public static Toast makeText(Context context, CharSequence text, @Duration int duration) { return makeText(context, null, text, duration); } // 隐藏的 makeText 方法，不能手动调用 public static Toast makeText(@NonNull Context context, @Nullable Looper looper, @NonNull CharSequence text, @Duration int duration) { Toast result = new Toast(context, looper); // 这里的 looper 为 null ... 然后到了 Toast 的构造方法： public Toast(@NonNull Context context, @Nullable Looper looper) { mContext = context; mTN = new TN(context.getPackageName(), looper); // looper 为 null ... } 到 Toast$TN 的构造方法： // looper = null TN(String packageName, @Nullable Looper looper) { ... if (looper == null) { // Use Looper.myLooper() if looper is not specified. looper = Looper.myLooper(); if (looper == null) { throw new RuntimeException( &quot;Can't toast on a thread that has not called Looper.prepare()&quot;); } } ... } 至此，我们已经追踪到了我们的崩溃的 RuntimeException，即要避免进入抛出异常的逻辑，要么调用的时候传递一个 Looper 进来（无法直接实现，能传递 Looper 参数的构造方法与 makeText 方法是 hide 的），要么 Looper.myLooper() 返回不为 null，提示信息 Can't create handler inside thread that has not called Looper.prepare() 里给出了方法，那我们在 toast 前面加一句 Looper.prepare() 试试？这次不崩溃了，但依然不弹出 Toast，毕竟，这个线程在调用完 show() 方法后就直接结束了，没有调用 Looper.loop()，至于为什么调用 Toast 的线程结束与否会对 Toast 的显示隐藏等起影响，在本文的后面的章节里会进行分析。 从崩溃提示来看，Android 并没有限制在非 UI 线程里使用 Toast，只是线程得是一个有 Looper 的线程。于是我们尝试构造如下代码，发现可以成功从非 UI 线程弹出 toast 了： new Thread(new Runnable() { @Override public void run() { final int MSG_TOAST = 101; final int MSG_QUIT = 102; Looper.prepare(); final Handler handler = new Handler() { @Override public void handleMessage(Message msg) { switch (msg.what) { case MSG_TOAST: Toast.makeText(MainActivity.this, &quot;Call toast on non-UI thread&quot;, Toast.LENGTH_SHORT) .show(); sendEmptyMessageDelayed(MSG_QUIT, 4000); return; case MSG_QUIT: Looper.myLooper().quit(); return; } super.handleMessage(msg); } }; handler.sendEmptyMessage(MSG_TOAST); Looper.loop(); } }).start(); 至于为什么 sendEmptyMesageDelayed(MSG_QUIT, 4000) 里的 delayMillis 我设成了 4000，这里卖个关子，感兴趣的同学可以把这个值调成 0、1000 等等看一下效果，会有一些意想不到的情况发生。 到此，我们可以得出 结论：可以在非 UI 线程里调用 Toast，但是得是一个有 Looper 的线程。 ps. 上面这一段演示代码让人感觉为了弹出一个 Toast 好麻烦，也可以采用 Activity.runOnUiThread、View.post 等方法从非 UI 线程将逻辑切换到 UI 线程里执行，直接从 UI 线程里弹出，UI 线程是有 Looper 的。 知识点：这里如果对 Looper、Handler 和 MessageQueue 有所了解，就容易理解多了，预计下一篇对这三剑客进行讲解。 应用在后台时能不能 Toast？ 这个问题也比较适合用一个简单的 demo 来尝试回答。 在 MainActivity 的 onCreate 里加上这样一段代码： view.postDelayed(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, &quot;background toast&quot;, Toast.LENGTH_SHORT).show(); } }, 5000); 然后待应用启动后按 HOME 键，等几秒看是否能弹出该 Toast 即可。 结论是：应用在后台时可以弹出 Toast。 Toast 数量有没有限制？ 这个问题将在下一节中一并解答。 Toast.makeText(…).show() 具体都做了些什么？ 首先看一下 makeText 方法。 文件 platform_frameworks_base/core/java/android/widget/Toast.java /** * Make a standard toast to display using the specified looper. * If looper is null, Looper.myLooper() is used. * @hide */ public static Toast makeText(@NonNull Context context, @Nullable Looper looper, @NonNull CharSequence text, @Duration int duration) { Toast result = new Toast(context, looper); LayoutInflater inflate = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); View v = inflate.inflate(com.android.internal.R.layout.transient_notification, null); TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message); tv.setText(text); result.mNextView = v; result.mDuration = duration; return result; } 这个方法里就是构造了一个 Toast 对象，将需要展示的 View 准备好，设置好超时时长标记，我们可以看一下 com.android.internal.R.layout.transient_notification 这个布局的内容： 文件 platform_frameworks_base/core/res/res/layout/transient_notification.xml &amp;lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:background=&quot;?android:attr/toastFrameBackground&quot;&amp;gt; &amp;lt;TextView android:id=&quot;@android:id/message&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_marginHorizontal=&quot;24dp&quot; android:layout_marginVertical=&quot;15dp&quot; android:layout_gravity=&quot;center_horizontal&quot; android:textAppearance=&quot;@style/TextAppearance.Toast&quot; android:textColor=&quot;@color/primary_text_default_material_light&quot; /&amp;gt; &amp;lt;/LinearLayout&amp;gt; 我们最常见的 Toast 就是从这个布局文件渲染出来的了。 我们继续看一下 makeText 里调用的 Toast 的构造方法里做了哪些事情： /** * Constructs an empty Toast object. If looper is null, Looper.myLooper() is used. * @hide */ public Toast(@NonNull Context context, @Nullable Looper looper) { mContext = context; mTN = new TN(context.getPackageName(), looper); mTN.mY = context.getResources().getDimensionPixelSize( com.android.internal.R.dimen.toast_y_offset); mTN.mGravity = context.getResources().getInteger( com.android.internal.R.integer.config_toastDefaultGravity); } 主要就是构造了一个 TN 对象，计算了位置。 TN 的构造方法： TN(String packageName, @Nullable Looper looper) { // XXX This should be changed to use a Dialog, with a Theme.Toast // defined that sets up the layout params appropriately. final WindowManager.LayoutParams params = mParams; params.height = WindowManager.LayoutParams.WRAP_CONTENT; params.width = WindowManager.LayoutParams.WRAP_CONTENT; params.format = PixelFormat.TRANSLUCENT; params.windowAnimations = com.android.internal.R.style.Animation_Toast; params.type = WindowManager.LayoutParams.TYPE_TOAST; params.setTitle(&quot;Toast&quot;); params.flags = WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE; mPackageName = packageName; if (looper == null) { // Use Looper.myLooper() if looper is not specified. looper = Looper.myLooper(); if (looper == null) { throw new RuntimeException( &quot;Can't toast on a thread that has not called Looper.prepare()&quot;); } } mHandler = new Handler(looper, null) { ... }; } 设置了 LayoutParams 的初始值，在后面 show 的时候会用到，设置了包名和 Looper、Handler。 TN 是 App 中用于与 Notification Service 交互的对象，这里涉及到 Binder 和跨进程通信的知识，这块会在后面开新篇来讲解，这里可以简单地理解一下：Notification Service 是系统为了管理各种 App 的 Notification（包括 Toast）的服务，比如 Toast，由这个服务来统一维护一个待展示 Toast 队列，各 App 需要弹 Toast 的时候就将相关信息发送给这个服务，服务会将其加入队列，然后根据队列的情况，依次通知各 App 展示和隐藏 Toast。 接下来看看 show 方法： /** * Show the view for the specified duration. */ public void show() { if (mNextView == null) { throw new RuntimeException(&quot;setView must have been called&quot;); } INotificationManager service = getService(); String pkg = mContext.getOpPackageName(); TN tn = mTN; tn.mNextView = mNextView; try { service.enqueueToast(pkg, tn, mDuration); } catch (RemoteException e) { // Empty } } 调用了 INotificationManager 的 enqueueToast 方法，INotificationManager 是一个接口，其实现类在 NotificationManagerService 里，我们来看 enqueueToast 方法的实现： 文件 platform_frameworks_base/services/core/java/com/android/server/notification/NotificationManagerService.java @Override public void enqueueToast(String pkg, ITransientNotification callback, int duration) { ... synchronized (mToastQueue) { ... try { ToastRecord record; int index = indexOfToastLocked(pkg, callback); // If it's already in the queue, we update it in place, we don't // move it to the end of the queue. if (index &amp;gt;= 0) { record = mToastQueue.get(index); record.update(duration); } else { // Limit the number of toasts that any given package except the android // package can enqueue. Prevents DOS attacks and deals with leaks. if (!isSystemToast) { int count = 0; final int N = mToastQueue.size(); for (int i=0; i&amp;lt;N; i++) { final ToastRecord r = mToastQueue.get(i); if (r.pkg.equals(pkg)) { count++; if (count &amp;gt;= MAX_PACKAGE_NOTIFICATIONS) { Slog.e(TAG, &quot;Package has already posted &quot; + count + &quot; toasts. Not showing more. Package=&quot; + pkg); return; } } } } Binder token = new Binder(); mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY); record = new ToastRecord(callingPid, pkg, callback, duration, token); mToastQueue.add(record); index = mToastQueue.size() - 1; keepProcessAliveIfNeededLocked(callingPid); } // If it's at index 0, it's the current toast. It doesn't matter if it's // new or just been updated. Call back and tell it to show itself. // If the callback fails, this will remove it from the list, so don't // assume that it's valid after this. if (index == 0) { showNextToastLocked(); } } finally { Binder.restoreCallingIdentity(callingId); } } } 主要就是使用调用方传来的包名、callback 和 duration 构造一个 ToastRecord，然后添加到 mToastQueue 中。如果在 mToastQueue 中已经存在该包名和 callback 的 Toast，则只更新其 duration。 这段代码里有一段可以回答我们的上一个问题 Toast 数量有没有限制 了： // Limit the number of toasts that any given package except the android // package can enqueue. Prevents DOS attacks and deals with leaks. if (!isSystemToast) { int count = 0; final int N = mToastQueue.size(); for (int i=0; i&amp;lt;N; i++) { final ToastRecord r = mToastQueue.get(i); if (r.pkg.equals(pkg)) { count++; if (count &amp;gt;= MAX_PACKAGE_NOTIFICATIONS) { Slog.e(TAG, &quot;Package has already posted &quot; + count + &quot; toasts. Not showing more. Package=&quot; + pkg); return; } } } } 即会计算 mToastQueue 里该包名的 Toast 数量，如果超过 50，则将当前申请加入队列的 Toast 抛弃掉。所以上一个问题的 结论是：Toast 队列里允许每个应用存在不超过 50 个 Toast。 那么构造 ToastRecord 并加入 mToastQueue 之后是如何调度，控制显示和隐藏的呢？enqueueToast 方法里有个逻辑是如果当前列表里只有一个 ToastRecord，则调用 showNextToastLocked，看一下与该方法相关的代码： @GuardedBy(&quot;mToastQueue&quot;) void showNextToastLocked() { ToastRecord record = mToastQueue.get(0); while (record != null) { ... try { record.callback.show(record.token); scheduleTimeoutLocked(record); return; } catch (RemoteException e) { ... if (index &amp;gt;= 0) { mToastQueue.remove(index); } ... } } } ... @GuardedBy(&quot;mToastQueue&quot;) private void scheduleTimeoutLocked(ToastRecord r) { mHandler.removeCallbacksAndMessages(r); Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r); long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY; mHandler.sendMessageDelayed(m, delay); } private void handleTimeout(ToastRecord record) { if (DBG) Slog.d(TAG, &quot;Timeout pkg=&quot; + record.pkg + &quot; callback=&quot; + record.callback); synchronized (mToastQueue) { int index = indexOfToastLocked(record.pkg, record.callback); if (index &amp;gt;= 0) { cancelToastLocked(index); } } } ... @GuardedBy(&quot;mToastQueue&quot;) void cancelToastLocked(int index) { ToastRecord record = mToastQueue.get(index); try { record.callback.hide(); } catch (RemoteException e) { ... } ToastRecord lastToast = mToastQueue.remove(index); mWindowManagerInternal.removeWindowToken(lastToast.token, true, DEFAULT_DISPLAY); keepProcessAliveIfNeededLocked(record.pid); if (mToastQueue.size() &amp;gt; 0) { // Show the next one. If the callback fails, this will remove // it from the list, so don't assume that the list hasn't changed // after this point. showNextToastLocked(); // 继续显示队列里的下一个 Toast } } ... private final class WorkerHandler extends Handler { ... @Override public void handleMessage(Message msg) { switch (msg.what) { case MESSAGE_TIMEOUT: handleTimeout((ToastRecord)msg.obj); break; ... } } } 即首先调用 record.callback.show(record.token)，通知 App 展示该 Toast，然后根据 duration，延时发送一条超时消息 MESSAGE_TIMEOUT，WorkHandler 收到该消息后，调用 cancelToastLocked 通知应用隐藏该 Toast，并继续调用 showNextToastLocked 显示队列里的下一个 Toast。这样一个机制就保证了只要队列里有 ToastRecord，就能依次显示出来。 机制弄清楚了，再详细看一下应用接到通知 show 和 hide 一个 Toast 后是怎么做的： 文件 platform_frameworks_base/core/java/android/widget/Toast.java private static class TN extends ITransientNotification.Stub { ... TN(String packageName, @Nullable Looper looper) { ... mHandler = new Handler(looper, null) { @Override public void handleMessage(Message msg) { switch (msg.what) { case SHOW: { IBinder token = (IBinder) msg.obj; handleShow(token); break; } case HIDE: { handleHide(); ... break; } ... } } }; } /** * schedule handleShow into the right thread */ @Override public void show(IBinder windowToken) { if (localLOGV) Log.v(TAG, &quot;SHOW: &quot; + this); mHandler.obtainMessage(SHOW, windowToken).sendToTarget(); } /** * schedule handleHide into the right thread */ @Override public void hide() { if (localLOGV) Log.v(TAG, &quot;HIDE: &quot; + this); mHandler.obtainMessage(HIDE).sendToTarget(); } ... public void handleShow(IBinder windowToken) { ... mWM.addView(mView, mParams); ... } ... public void handleHide() { ... mWM.removeViewImmediate(mView); ... } } 显示过程：show 方法被远程调用后，先是发送了一个 SHOW 消息，接收到该消息后调用了 handleShow 方法，然后 mWM.addView 将该 View 添加到窗口。 隐藏过程：hide 方法被远程调用后，先是发送了一个 HIDE 消息，接收到该消息后调用了 handleHide 方法，然后 mWM.removeViewImmediate 将该 View 从窗口移除。 这里插播一条结论，就是前文留下的为什么调用 Toast 的线程线束之后没弹出的 Toast 就无法弹出了的问题，因为 Notification Service 通知应用进程显示或隐藏 Toast 时，使用的是 mHandler.obtainMessage(SHOW).sendToTarget() 与 mHandler.obtainMessage(HIDE).sendToTarget()，这个消息发出去后，Handler 对应线程没有在 Looper.loop() 过程里的话，就没有办法进入到 Handler 的 handleMessage 方法里去，自然也就无法调用显示和隐藏 View 的流程了。Looper.loop() 相关的知识点将在下篇讲解。 总结 补充后的 Toast 知识点列表 Toast 不是 View，它用于帮助创建并展示包含一条小消息的 View； 它的设计理念是尽量不惹眼，但又能展示想让用户看到的信息； 被展示时，浮在应用界面之上； 永远不会获取到焦点； 大小取决于消息的长度； 超时后会自动消失； 可以自定义显示在屏幕上的位置（默认左右居中显示在靠近屏幕底部的位置）； 可以使用自定义布局，也只有在自定义布局的时候才需要直接调用 Toast 的构造方法，其它时候都是使用 makeText 方法来创建 Toast； Toast 弹出后当前 Activity 会保持可见性和可交互性； 使用 cancel 方法可以立即将已显示的 Toast 关闭，让未显示的 Toast 不再显示； Toast 也算是一个「通知」，如果弹出状态消息后期望得到用户响应，应该使用 Notification； Toast 的超时时间为 LENGTH_SHORT 对应 2 秒，LENGTH_LONG 对应 3.5 秒； 不能通过 Toast 类的公开方法直接弹一个时间超长的 Toast； 应用在后台时可以调用 Toast 并正常弹出； Toast 队列里允许单个应用往里添加 50 个 Toast，超出的将被丢弃。 遗留知识点 本篇涉及到了一些需要进一步了解的知识点，在后续的篇章中会依次解读： Handler、Looper 和 MessageQueue WindowManager Binder 与跨进程通信 本篇用到的源码分析方法 查找关键变量被引用的地方； 按方法调用堆栈一层层逻辑跟踪与分析； 使用 git blame 查看关键代码行的变更日志； 后话 到此，上面提到的几个问题都已经解答完毕，对 Toast 源码的分析也告一段落。 写这篇文章花费的时间比较长，所以并不能按照预计的节奏更新，这里表示抱歉。另外，各位如果有耐心读到这里，觉得本文的思路是否清晰，是否能跟随文章的节奏理解一些东西？因为我也在摸索写这类文章的组织形式，所以也希望能收到反馈和建议，以作改进，先行谢过。 最后，照例要安利一下我的微信公众号「闷骚的程序员」，扫码关注，接收 rtfsc-android 的最近更新。</summary></entry><entry><title type="html">程序员节的过节姿势大全</title><link href="http://localhost:4000/blog/2017/10/24/1024-poses.html" rel="alternate" type="text/html" title="程序员节的过节姿势大全" /><published>2017-10-24T00:00:00+08:00</published><updated>2017-10-24T00:00:00+08:00</updated><id>http://localhost:4000/blog/2017/10/24/1024-poses</id><content type="html" xml:base="http://localhost:4000/blog/2017/10/24/1024-poses.html">&lt;p&gt;今天是 10 月 24 日，不知道你的朋友圈有没有被程序员节刷屏，反正我的是被刷了。&lt;/p&gt;

&lt;p&gt;看到 1024 这个数字，相信很多人都怀着特别的感情，比如我，游泳不会止步于 1000 米，肯定会补 24 米凑个整，跑步如果跑到 10 公里，那一定再多跑个 0.24 出来。&lt;/p&gt;

&lt;p&gt;搞不好还会想起那些年追过的社区，嗟叹一下逝去的青春：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/1024-gold.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，这样一个特别的日子，我的交游圈里大家是以怎样的姿势度过的呢？&lt;/p&gt;

&lt;h2 id=&quot;程序员们怎么过&quot;&gt;程序员们怎么过&lt;/h2&gt;

&lt;h3 id=&quot;聚众自黑型&quot;&gt;聚众自黑型&lt;/h3&gt;

&lt;p&gt;作为互联网上最擅长自黑自嘲，以至于现在不明真相的群众都把他们的自黑当真话听的群体，这一天怎么会甘于寂寞，今天微信群里的画风是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/overtime.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/3w-programmer.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/fake.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（from 掘金.专栏作者群）&lt;/p&gt;

&lt;p&gt;大家纷纷表示自己是个假程序员。&lt;/p&gt;

&lt;h3 id=&quot;感xuan恩yao公司关怀型&quot;&gt;感(xuan)恩(yao)公司关怀型&lt;/h3&gt;

&lt;p&gt;以重视员工工作体验著称的互联网公司们也没闲着，为程序员们推出了各种福利，所以今天朋友圈里的画风是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/1024-sogou.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/1024-meituan.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/1024-kuaishou.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有程序员鼓励师出没：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/encourage.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（from 掘金.专栏作者群）&lt;/p&gt;

&lt;h2 id=&quot;非程序员们怎么过&quot;&gt;非程序员们怎么过&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/doubt.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关我屁事？&lt;/p&gt;

&lt;h2 id=&quot;公众号们怎么过&quot;&gt;公众号们怎么过&lt;/h2&gt;

&lt;p&gt;也算一年一度的节，相关的公众号们也没闲着。&lt;/p&gt;

&lt;h3 id=&quot;科普型&quot;&gt;科普型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/kepu.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（知晓程序员）&lt;/p&gt;

&lt;h3 id=&quot;在世界中心呼唤爱型&quot;&gt;在世界中心呼唤爱型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/request-love.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（Java 程序员联盟）&lt;/p&gt;

&lt;h3 id=&quot;趁势搞活动型&quot;&gt;趁势搞活动型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/1024-vote.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（InfoQ）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/release-books.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（码农翻身）&lt;/p&gt;

&lt;h3 id=&quot;欠揍型&quot;&gt;欠揍型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/qianzou.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（微信派）&lt;/p&gt;

&lt;h2 id=&quot;掘金怎么过&quot;&gt;掘金怎么过&lt;/h2&gt;

&lt;p&gt;文首的图就是掘金社区去年 1024 出品，今年他们录了一首歌，链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/59ee13d7f265da43284006e3&quot;&gt;老子今天不加班，程序员也需要自由&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;好了，夜已深，打完收工。祝 WE 程序员们少熬夜，保住我们的发际线。&lt;/p&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">今天是 10 月 24 日，不知道你的朋友圈有没有被程序员节刷屏，反正我的是被刷了。 看到 1024 这个数字，相信很多人都怀着特别的感情，比如我，游泳不会止步于 1000 米，肯定会补 24 米凑个整，跑步如果跑到 10 公里，那一定再多跑个 0.24 出来。 搞不好还会想起那些年追过的社区，嗟叹一下逝去的青春： 那么，这样一个特别的日子，我的交游圈里大家是以怎样的姿势度过的呢？ 程序员们怎么过 聚众自黑型 作为互联网上最擅长自黑自嘲，以至于现在不明真相的群众都把他们的自黑当真话听的群体，这一天怎么会甘于寂寞，今天微信群里的画风是这样的： （from 掘金.专栏作者群） 大家纷纷表示自己是个假程序员。 感(xuan)恩(yao)公司关怀型 以重视员工工作体验著称的互联网公司们也没闲着，为程序员们推出了各种福利，所以今天朋友圈里的画风是这样的： 还有程序员鼓励师出没： （from 掘金.专栏作者群） 非程序员们怎么过 关我屁事？ 公众号们怎么过 也算一年一度的节，相关的公众号们也没闲着。 科普型 （知晓程序员） 在世界中心呼唤爱型 （Java 程序员联盟） 趁势搞活动型 （InfoQ） （码农翻身） 欠揍型 （微信派） 掘金怎么过 文首的图就是掘金社区去年 1024 出品，今年他们录了一首歌，链接： 老子今天不加班，程序员也需要自由 后话 好了，夜已深，打完收工。祝 WE 程序员们少熬夜，保住我们的发际线。</summary></entry><entry><title type="html">发布一款光谷社区第三方 Android App</title><link href="http://localhost:4000/android/2017/10/14/guanggoo-android-app.html" rel="alternate" type="text/html" title="发布一款光谷社区第三方 Android App" /><published>2017-10-14T00:00:00+08:00</published><updated>2017-10-14T00:00:00+08:00</updated><id>http://localhost:4000/android/2017/10/14/guanggoo-android-app</id><content type="html" xml:base="http://localhost:4000/android/2017/10/14/guanggoo-android-app.html">&lt;p&gt;在过去的一个来月，我利用业余时间做了一款光谷社区的第三方 Android 客户端。&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;光谷社区是我在决定离开帝都回武汉的过程中，及回武汉之后关注得较多的武汉本土社区，网站 &lt;a href=&quot;http://guanggoo.com&quot;&gt;http://guanggoo.com&lt;/a&gt; 自己的 description 是这样的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;光谷社区是源自光谷的高端社交网络，这里有关于创业、创意、IT、金融等最热话题的交流，也有招聘问答、活动交友等最新资讯的发布。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;描述得还比较准确。我觉得身在光谷，或者心系光谷的童鞋们可以关注一下。&lt;/p&gt;

&lt;h2 id=&quot;发布详情&quot;&gt;发布详情&lt;/h2&gt;

&lt;p&gt;目前支持特性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;登录&lt;/li&gt;
  &lt;li&gt;首页主题列表（三种视图）&lt;/li&gt;
  &lt;li&gt;主题详情 / 评论列表&lt;/li&gt;
  &lt;li&gt;节点列表 / 节点主题列表&lt;/li&gt;
  &lt;li&gt;评论 / 艾特用户&lt;/li&gt;
  &lt;li&gt;分享主题链接&lt;/li&gt;
  &lt;li&gt;发表新主题&lt;/li&gt;
  &lt;li&gt;查看用户信息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;源码放在 GitHub 上：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mzlogin/guanggoo-android&quot;&gt;https://github.com/mzlogin/guanggoo-android&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;部分界面截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mazhuang.org/guanggoo-android/screenshots/topic-list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mazhuang.org/guanggoo-android/screenshots/topic-detail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mazhuang.org/guanggoo-android/screenshots/nodes-list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mazhuang.org/guanggoo-android/screenshots/drawer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多的功能开发、完善以及优化还在进行中，也希望看到的朋友们下载试用起来，多提建议多交流。&lt;/p&gt;

&lt;p&gt;好吧，啰嗦了这么多，哪里能够下载得到呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;APK 下载链接&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（如果是在微信里看到这里，建议长按后复制链接到浏览器打开）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mazhuang.org/guanggoo-android/guanggoo-lastest.apk&quot;&gt;http://mazhuang.org/guanggoo-android/guanggoo-lastest.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;百度网盘备用链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1pL0t1Zd&quot;&gt;https://pan.baidu.com/s/1pL0t1Zd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;扫描或识别二维码下载&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（如果使用微信识别二维码不能开始下载，还是复制上方的链接到浏览器打开下载吧）&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;192px&quot; height=&quot;192px&quot; src=&quot;http://mazhuang.org/guanggoo-android/qrcode.png&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;为什么会做这个&quot;&gt;为什么会做这个&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;社区目前只有 Web 页面，做了移动端适配，体验也还不错。不过作为一个打开频率较高的应用，我还是希望能用上 App；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;之前偶然在社区的几个帖子里也有一些用户问到是否有 App 可用，都没有了下文，可以满足一下这部分用户的需求；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作为一个长期维护的业余项目，更深刻地体会 App 开发的整个生命周期，也将一些想学习的技术应用到实际项目中；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;借此机会认识一下光谷技术圈子里志趣相投的朋友。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;前缘后续&quot;&gt;前缘后续&lt;/h2&gt;

&lt;p&gt;上 GitHub 搜索 guanggoo 出来的结果很少，发现有一个 &lt;a href=&quot;https://github.com/cauil/react-native-guanggoo&quot;&gt;cauil/react-native-guanggoo&lt;/a&gt; 的项目适配了 iOS，独缺 Android 客户端，于是决定自己写一个。要不是那一阵刚好闹 Facebook 开源许可证风波，让人没有学习 React Native 的信心和欲望，也许我就学点 React Native 在这位仁兄的基础上开发了。&lt;/p&gt;

&lt;p&gt;经过几周业余时间和十一长假期间的开发，目前完成度不算特别高，但常用的功能已经基本可用了，当然还有一些功能比如注册、帖子里的外部链接打开等，我是先抛给了系统浏览器。想着只埋头自己开发也比较枯燥，决定先放出一个版本来让网友们吐吐槽，提提意见，应该能做得更好。&lt;/p&gt;

&lt;p&gt;PS: 本文非软文，也没有收取光谷社区任何好处，请光谷社区嘴炮管理员看到这里帮我开通个 VIP，我的社区 ID 是 mzlogin，:-P。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;好了，最后照例安利一下我自己的微信公众号，近期专注 Java、Android 相关的技术分享，如果你感兴趣，可以关注一下接收最新动态。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;192px&quot; height=&quot;192px&quot; src=&quot;http://mazhuang.org/assets/images/qrcode.jpg&quot; /&gt;&lt;/div&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">在过去的一个来月，我利用业余时间做了一款光谷社区的第三方 Android 客户端。 前言 光谷社区是我在决定离开帝都回武汉的过程中，及回武汉之后关注得较多的武汉本土社区，网站 http://guanggoo.com 自己的 description 是这样的： 光谷社区是源自光谷的高端社交网络，这里有关于创业、创意、IT、金融等最热话题的交流，也有招聘问答、活动交友等最新资讯的发布。 描述得还比较准确。我觉得身在光谷，或者心系光谷的童鞋们可以关注一下。 发布详情 目前支持特性： 登录 首页主题列表（三种视图） 主题详情 / 评论列表 节点列表 / 节点主题列表 评论 / 艾特用户 分享主题链接 发表新主题 查看用户信息 源码放在 GitHub 上： https://github.com/mzlogin/guanggoo-android 部分界面截图： 更多的功能开发、完善以及优化还在进行中，也希望看到的朋友们下载试用起来，多提建议多交流。 好吧，啰嗦了这么多，哪里能够下载得到呢？ APK 下载链接 （如果是在微信里看到这里，建议长按后复制链接到浏览器打开） http://mazhuang.org/guanggoo-android/guanggoo-lastest.apk 百度网盘备用链接： https://pan.baidu.com/s/1pL0t1Zd 扫描或识别二维码下载 （如果使用微信识别二维码不能开始下载，还是复制上方的链接到浏览器打开下载吧） 为什么会做这个 社区目前只有 Web 页面，做了移动端适配，体验也还不错。不过作为一个打开频率较高的应用，我还是希望能用上 App； 之前偶然在社区的几个帖子里也有一些用户问到是否有 App 可用，都没有了下文，可以满足一下这部分用户的需求； 作为一个长期维护的业余项目，更深刻地体会 App 开发的整个生命周期，也将一些想学习的技术应用到实际项目中； 借此机会认识一下光谷技术圈子里志趣相投的朋友。 前缘后续 上 GitHub 搜索 guanggoo 出来的结果很少，发现有一个 cauil/react-native-guanggoo 的项目适配了 iOS，独缺 Android 客户端，于是决定自己写一个。要不是那一阵刚好闹 Facebook 开源许可证风波，让人没有学习 React Native 的信心和欲望，也许我就学点 React Native 在这位仁兄的基础上开发了。 经过几周业余时间和十一长假期间的开发，目前完成度不算特别高，但常用的功能已经基本可用了，当然还有一些功能比如注册、帖子里的外部链接打开等，我是先抛给了系统浏览器。想着只埋头自己开发也比较枯燥，决定先放出一个版本来让网友们吐吐槽，提提意见，应该能做得更好。 PS: 本文非软文，也没有收取光谷社区任何好处，请光谷社区嘴炮管理员看到这里帮我开通个 VIP，我的社区 ID 是 mzlogin，:-P。 好了，最后照例安利一下我自己的微信公众号，近期专注 Java、Android 相关的技术分享，如果你感兴趣，可以关注一下接收最新动态。</summary></entry><entry><title type="html">阅读源码的意义与方法</title><link href="http://localhost:4000/android/2017/10/05/rtfsc-methods-and-meaning.html" rel="alternate" type="text/html" title="阅读源码的意义与方法" /><published>2017-10-05T00:00:00+08:00</published><updated>2017-10-05T00:00:00+08:00</updated><id>http://localhost:4000/android/2017/10/05/rtfsc-methods-and-meaning</id><content type="html" xml:base="http://localhost:4000/android/2017/10/05/rtfsc-methods-and-meaning.html">&lt;p&gt;思索了这两个问题良久，也去知乎找了一些相关话题的问答，但并没有标准答案。所以，我这里也只是记录一些我对此的看法，也许会随着 RTFSC 阅历的丰富而发生变化，我会记录更新于 &lt;a href=&quot;https://github.com/mzlogin/rtfsc-android&quot;&gt;https://github.com/mzlogin/rtfsc-android&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;意义&quot;&gt;意义&lt;/h2&gt;

&lt;p&gt;在我看来，阅读源码的意义在于学习优秀的「套路」。&lt;/p&gt;

&lt;p&gt;这里的「套路」所指范围很广，大到架构设计，小到可取的命名风格，还有设计模式、实现某类功能使用到的数据结构和算法等等。所谓高手，其实就是能比大部分人更早更快地掌握套路并熟练运用之人。&lt;/p&gt;

&lt;p&gt;埋头在自己的天地里耕芸固然也能逐渐进步和成长，但总会有时候会遇到一些场景，你苦思良久也无法做出良好的设计，总会有一些时候，纠结如何为一个变量命名让你停下飞速敲击的手指。这些令你为难的场景，先贤们也许早就遇到过，并且给出了优雅的解决方案。看优秀的源码的时候，将这样的场景与对应的方案收入囊中，或者仅仅在脑中留下一个印象也好，以便在需要的时候，你的武器库里总能掏出一把称手的家伙来。&lt;/p&gt;

&lt;h2 id=&quot;一些方法&quot;&gt;一些方法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;不应该这样&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不应该漫无目的地随手拿起一分源码，试图去通读。这一方面会过目即忘无所收获，另一方面会枯燥得让你迅速从着手到放弃。学习的方式有很多种，阅读源码并不一定是最适合你当前的情况的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应该这样&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;精心挑选要阅读的源码项目。&lt;/p&gt;

    &lt;p&gt;这最好是与你的编程语言、你的工作内容、你的兴趣所在相关的，这样才能更切实地感受到阅读源码给你带来的益处，更有动力继续。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果你想学习的知识点有官方文档，先看文档再看源码。&lt;/p&gt;

    &lt;p&gt;直接从源码着手，搞清楚原理固然是好，但是源码有可能是难啃的，先熟悉官方提供给所有人看的文档，能较为平滑地对这方面的知识先有个大概的了解，然后再结合源码去深入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提出具体的问题，然后带着问题到源码中找答案。&lt;/p&gt;

    &lt;p&gt;比如在使用 Toast 的过程中，你可能会想到一些问题：&lt;code class=&quot;highlighter-rouge&quot;&gt;Toast.makeText(...).show()&lt;/code&gt; 时发生了什么？Toast 能不能在非 UI 线程调用？能不能自定义 Toast 布局？诸如此类。在源码中探寻完你想要的答案，你的目的也就达到了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从一些共性层面入手。&lt;/p&gt;

    &lt;p&gt;大部分的程序里都会使用到的东西，比如线程模型、UI 组织结构、任务调度方式等等。针对某一个方面去了解，比漫无目的要有效率得多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最好能够编译运行起来。&lt;/p&gt;

    &lt;p&gt;如果一份代码你只能看不能跑，那可能读到一些地方你只能猜这个地方的数据值和跳转结构是怎么样的，而很有可能你猜的是错的。但如果你能编译运行，那在需要的时候你可以修改，加日志等等来更好地观察和验证你的想法，得到正确的理解。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;做一些笔记。&lt;/p&gt;

    &lt;p&gt;一方面是将你的学习成果保留下来，方便随时查阅，毕竟只凭脑子记忆是不靠谱的；另一方面在学习的过程中，也能帮助理解。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对我的文章感兴趣的朋友，可以关注我的微信公众号 isprogrammer，接收我的更新通知。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;192px&quot; height=&quot;192px&quot; src=&quot;http://mazhuang.org/assets/images/qrcode.jpg&quot; /&gt;&lt;/div&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">思索了这两个问题良久，也去知乎找了一些相关话题的问答，但并没有标准答案。所以，我这里也只是记录一些我对此的看法，也许会随着 RTFSC 阅历的丰富而发生变化，我会记录更新于 https://github.com/mzlogin/rtfsc-android。 意义 在我看来，阅读源码的意义在于学习优秀的「套路」。 这里的「套路」所指范围很广，大到架构设计，小到可取的命名风格，还有设计模式、实现某类功能使用到的数据结构和算法等等。所谓高手，其实就是能比大部分人更早更快地掌握套路并熟练运用之人。 埋头在自己的天地里耕芸固然也能逐渐进步和成长，但总会有时候会遇到一些场景，你苦思良久也无法做出良好的设计，总会有一些时候，纠结如何为一个变量命名让你停下飞速敲击的手指。这些令你为难的场景，先贤们也许早就遇到过，并且给出了优雅的解决方案。看优秀的源码的时候，将这样的场景与对应的方案收入囊中，或者仅仅在脑中留下一个印象也好，以便在需要的时候，你的武器库里总能掏出一把称手的家伙来。 一些方法 不应该这样 不应该漫无目的地随手拿起一分源码，试图去通读。这一方面会过目即忘无所收获，另一方面会枯燥得让你迅速从着手到放弃。学习的方式有很多种，阅读源码并不一定是最适合你当前的情况的。 应该这样 精心挑选要阅读的源码项目。 这最好是与你的编程语言、你的工作内容、你的兴趣所在相关的，这样才能更切实地感受到阅读源码给你带来的益处，更有动力继续。 如果你想学习的知识点有官方文档，先看文档再看源码。 直接从源码着手，搞清楚原理固然是好，但是源码有可能是难啃的，先熟悉官方提供给所有人看的文档，能较为平滑地对这方面的知识先有个大概的了解，然后再结合源码去深入。 提出具体的问题，然后带着问题到源码中找答案。 比如在使用 Toast 的过程中，你可能会想到一些问题：Toast.makeText(...).show() 时发生了什么？Toast 能不能在非 UI 线程调用？能不能自定义 Toast 布局？诸如此类。在源码中探寻完你想要的答案，你的目的也就达到了。 从一些共性层面入手。 大部分的程序里都会使用到的东西，比如线程模型、UI 组织结构、任务调度方式等等。针对某一个方面去了解，比漫无目的要有效率得多。 最好能够编译运行起来。 如果一份代码你只能看不能跑，那可能读到一些地方你只能猜这个地方的数据值和跳转结构是怎么样的，而很有可能你猜的是错的。但如果你能编译运行，那在需要的时候你可以修改，加日志等等来更好地观察和验证你的想法，得到正确的理解。 做一些笔记。 一方面是将你的学习成果保留下来，方便随时查阅，毕竟只凭脑子记忆是不靠谱的；另一方面在学习的过程中，也能帮助理解。 对我的文章感兴趣的朋友，可以关注我的微信公众号 isprogrammer，接收我的更新通知。</summary></entry><entry><title type="html">Android 源码分析开篇</title><link href="http://localhost:4000/android/2017/09/23/rtfsc-android-start.html" rel="alternate" type="text/html" title="Android 源码分析开篇" /><published>2017-09-23T00:00:00+08:00</published><updated>2017-09-23T00:00:00+08:00</updated><id>http://localhost:4000/android/2017/09/23/rtfsc-android-start</id><content type="html" xml:base="http://localhost:4000/android/2017/09/23/rtfsc-android-start.html">&lt;p&gt;在心中谋划已久的此事终于要开篇了，虽然迟了点，十年前没有种的树，就从现在开始种吧。&lt;/p&gt;

&lt;p&gt;自 2014 年底从 Windows 开发转向 Android 开发以后，到现在的两年多时间里，也陆陆续续看了一些强相关的书籍和教程，按我在豆瓣标记的时间顺序：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;《Android Programming: The Big Nert Ranch Guide》&lt;/li&gt;
  &lt;li&gt;《疯狂 Java 讲义》&lt;/li&gt;
  &lt;li&gt;《疯狂 Android 讲义》&lt;/li&gt;
  &lt;li&gt;《Android 软件安全与逆向分析》&lt;/li&gt;
  &lt;li&gt;《深入理解 Java 虚拟机》&lt;/li&gt;
  &lt;li&gt;《Android Training》&lt;/li&gt;
  &lt;li&gt;《Android 开发艺术探索》&lt;/li&gt;
  &lt;li&gt;《Android 群英传》&lt;/li&gt;
  &lt;li&gt;《App 研发录》&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再加上平时在 GitHub 和掘金等技术社区的晃荡，接触过的资料其实也不少了，但回想起年初找工作的时候一些比较失落的经历，自身存在一些很要命的问题，就是如自己一直也知道的那样：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;技术的广度还可以，可深度不够，不够聚焦；&lt;/li&gt;
  &lt;li&gt;掌握的知识是散乱的，不成体系，禁不住往深了问。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这一方面归因于自己的学习方式需要优化，技术书籍的学习不能只是通读，精读、主题阅读和针对性的实践总结一样不能少；另一方面挑选书籍要更有目的性，最好是明晰的由浅入深的层次递进；还有就是市面上流行的书籍和网络上的技术分享恐怕都无法让我彻底改善这种情况。&lt;/p&gt;

&lt;p&gt;这个尴尬的年纪，在一个个焦虑的夜晚，躺在床上听着窗外偶尔传来的狗叫，汽车的呼啸，也会对自己呐喊，我不要做一个会用九种语言写 Hello World 但无一精通的程序员，迫切需要 &lt;strong&gt;聚焦&lt;/strong&gt;、&lt;strong&gt;精通&lt;/strong&gt; 和 &lt;strong&gt;成体系&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;一切就从自己的工作内容最相关的业务与技术开始入手。业务相关的知识可以在工作时间来积累，业余的时间里，多 Read The F*cking Source Code，从优秀的源码和设计里汲取营养。有 AOSP 这样包罗万象的宝藏在侧，也无需纠结和寻觅到底应该看些什么，里面程序设计语言、设计模式、架构模式等等，应有尽有。&lt;/p&gt;

&lt;p&gt;所以，最近计划开始写一系列 Android 源码分析的文章，包括 Android 系统源码及一些优秀的第三方类库等等。这将是一个比较漫长的过程，需要一个脉络，可选的方式是自底向上和自顶向下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自底向上&lt;/strong&gt;，一开始就是啃硬骨头，理解各种底层概念和知识，对我这样的选手来讲，容易失去兴趣，但是后期理解上层的东西更顺畅，毕竟基础知识点已经铺垫好了。比如《老罗的 Android 之旅》，就是比较典型的采用这种方式的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ^ 难度
 |    ---
 |   /   \
 |   |   |
 |  /    |
 |  |    |
 | /     |
 | |     |
 | |     +-----------------
 |/
 +-------------------------&amp;gt;
                        时间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;自顶向下&lt;/strong&gt;，预计是需要从几个熟悉的话题展开，充分下探之后，基础知识大致铺垫开，后面才会比较容易。这样做的一个好处是比较有目的性，总是知道下一个步要去找些什么，看些什么；另一点是从熟悉的东西讲起，前期曲线比较平滑。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ^ 难度
 |              _
 |            _/ |
 |          _/    \
 |        _/       \
 |       /          \
 |     _/           |
 |   _/              \
 | _/                 \----
 |/
 +-------------------------&amp;gt;
                        时间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;自认为没有恒心与毅力像罗升阳那样自底向上面面俱到地把 Android 的各个方面都分析一遍，我的大致的思路是打算从我们最常用的一些类开始，自顶向下摸索，牵扯到哪些需要深入理解的知识点，就另开一篇详细说明，这个过程类似 JVM 的 GC 中采用的可达性算法，只要选好了 GC roots，无论是深度优先还是广度优先，天长日久，总会覆盖所有我们常用的技术及其内部的原理。&lt;/p&gt;

&lt;p&gt;举个例子，比如我第一篇打算分析 Toast 类，那由它展开可能会逐渐讲到很多的话题：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Toast
|
|--- Handler
|    |
|    |--- Communicating with the UI thread
|    |
|    |--- Looper/Message/MessageQueue
|         |
|         |--- ThreadLocal
|
|--- Binder
|    |
|    |--- ServiceManager
|    |
|    |--- Inter-process communication
|    |
|    |--- ...
|
|--- Update UI outside the main thread
|
|--- ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每介绍一篇，可能会发散出一些本篇中涉及但是没有深入讲解的知识点，留待后续补上，我将在文章最后把这些知识点列出来。在当前文章中需要提到的地方，就插个桩，留个尽量恰当的比喻在那里，「把它当作 XXX 理解就好了」。&lt;/p&gt;

&lt;p&gt;当暂时沿着某一个主题延伸不下去，又没有找到合适的新主题的时候，就按一些比较有体系的主题来写，比如「Android 里的设计模式」，可以单独写一个系列。&lt;/p&gt;

&lt;p&gt;这样做的目的，主要是想进行一些比较深入的学习和对过往知识的整理，将一个一个散落的知识点孤岛串联起来，让它们成为我的技能战斗群，写着应用代码时能对表面之下的原理了然于胸，减少写代码时对猜测和调试的依赖，对每一个我敢写出来的技能点，都能自信满满地与人对谈。&lt;/p&gt;

&lt;p&gt;目前的计划是按照我最近一段时间更新公众号的频率，大约十天更新一篇，阅读源码主要使用的工具和方式是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub 上的 &lt;a href=&quot;https://github.com/android/platform_frameworks_base&quot;&gt;android/platform_frameworks_base&lt;/a&gt; 等源码配合 Chrome 插件 insight.io&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mazhuang.org/2016/12/14/rtfsc-with-opengrok/&quot;&gt;自己电脑上搭建的 OpenGrok 浏览 Android 7.1.2 源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://androidxref.com/7.1.1_r6/&quot;&gt;http://androidxref.com/7.1.1_r6/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大致思路就是这样，实践一阵试试。不知道自顶向下的方法是否走得下去，要是实在不行，还是乖乖回去跟着老罗的脚步学习吧。&lt;/p&gt;

&lt;p&gt;开篇，就当先立个 Flag 在这里，万一坚持做下去了呢，牛皮都不敢吹还哪敢做成什么事啊，最次也「世上无难事，只要肯放弃」嘛。对此有兴趣的朋友，请关注我的微信公众号「闷骚的程序员」，一起 Read The F*cking Android Source Code。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;192px&quot; height=&quot;192px&quot; src=&quot;http://mazhuang.org/assets/images/qrcode.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;后续相关的系列文章，会在 GitHub 仓库 &lt;a href=&quot;https://github.com/mzlogin/rtfsc-android&quot;&gt;mzlogin/rtfsc-android&lt;/a&gt; 汇总更新，欢迎关注，看我起高楼，或是啪啪打脸。&lt;/p&gt;</content><author><name>qishunli</name><email>shunliqi@163.com</email></author><summary type="html">在心中谋划已久的此事终于要开篇了，虽然迟了点，十年前没有种的树，就从现在开始种吧。 自 2014 年底从 Windows 开发转向 Android 开发以后，到现在的两年多时间里，也陆陆续续看了一些强相关的书籍和教程，按我在豆瓣标记的时间顺序： 《Android Programming: The Big Nert Ranch Guide》 《疯狂 Java 讲义》 《疯狂 Android 讲义》 《Android 软件安全与逆向分析》 《深入理解 Java 虚拟机》 《Android Training》 《Android 开发艺术探索》 《Android 群英传》 《App 研发录》 再加上平时在 GitHub 和掘金等技术社区的晃荡，接触过的资料其实也不少了，但回想起年初找工作的时候一些比较失落的经历，自身存在一些很要命的问题，就是如自己一直也知道的那样： 技术的广度还可以，可深度不够，不够聚焦； 掌握的知识是散乱的，不成体系，禁不住往深了问。 这一方面归因于自己的学习方式需要优化，技术书籍的学习不能只是通读，精读、主题阅读和针对性的实践总结一样不能少；另一方面挑选书籍要更有目的性，最好是明晰的由浅入深的层次递进；还有就是市面上流行的书籍和网络上的技术分享恐怕都无法让我彻底改善这种情况。 这个尴尬的年纪，在一个个焦虑的夜晚，躺在床上听着窗外偶尔传来的狗叫，汽车的呼啸，也会对自己呐喊，我不要做一个会用九种语言写 Hello World 但无一精通的程序员，迫切需要 聚焦、精通 和 成体系。 一切就从自己的工作内容最相关的业务与技术开始入手。业务相关的知识可以在工作时间来积累，业余的时间里，多 Read The F*cking Source Code，从优秀的源码和设计里汲取营养。有 AOSP 这样包罗万象的宝藏在侧，也无需纠结和寻觅到底应该看些什么，里面程序设计语言、设计模式、架构模式等等，应有尽有。 所以，最近计划开始写一系列 Android 源码分析的文章，包括 Android 系统源码及一些优秀的第三方类库等等。这将是一个比较漫长的过程，需要一个脉络，可选的方式是自底向上和自顶向下： 自底向上，一开始就是啃硬骨头，理解各种底层概念和知识，对我这样的选手来讲，容易失去兴趣，但是后期理解上层的东西更顺畅，毕竟基础知识点已经铺垫好了。比如《老罗的 Android 之旅》，就是比较典型的采用这种方式的。 ^ 难度 | --- | / \ | | | | / | | | | | / | | | | | | +----------------- |/ +-------------------------&amp;gt; 时间 自顶向下，预计是需要从几个熟悉的话题展开，充分下探之后，基础知识大致铺垫开，后面才会比较容易。这样做的一个好处是比较有目的性，总是知道下一个步要去找些什么，看些什么；另一点是从熟悉的东西讲起，前期曲线比较平滑。 ^ 难度 | _ | _/ | | _/ \ | _/ \ | / \ | _/ | | _/ \ | _/ \---- |/ +-------------------------&amp;gt; 时间 自认为没有恒心与毅力像罗升阳那样自底向上面面俱到地把 Android 的各个方面都分析一遍，我的大致的思路是打算从我们最常用的一些类开始，自顶向下摸索，牵扯到哪些需要深入理解的知识点，就另开一篇详细说明，这个过程类似 JVM 的 GC 中采用的可达性算法，只要选好了 GC roots，无论是深度优先还是广度优先，天长日久，总会覆盖所有我们常用的技术及其内部的原理。 举个例子，比如我第一篇打算分析 Toast 类，那由它展开可能会逐渐讲到很多的话题： Toast | |--- Handler | | | |--- Communicating with the UI thread | | | |--- Looper/Message/MessageQueue | | | |--- ThreadLocal | |--- Binder | | | |--- ServiceManager | | | |--- Inter-process communication | | | |--- ... | |--- Update UI outside the main thread | |--- ... 每介绍一篇，可能会发散出一些本篇中涉及但是没有深入讲解的知识点，留待后续补上，我将在文章最后把这些知识点列出来。在当前文章中需要提到的地方，就插个桩，留个尽量恰当的比喻在那里，「把它当作 XXX 理解就好了」。 当暂时沿着某一个主题延伸不下去，又没有找到合适的新主题的时候，就按一些比较有体系的主题来写，比如「Android 里的设计模式」，可以单独写一个系列。 这样做的目的，主要是想进行一些比较深入的学习和对过往知识的整理，将一个一个散落的知识点孤岛串联起来，让它们成为我的技能战斗群，写着应用代码时能对表面之下的原理了然于胸，减少写代码时对猜测和调试的依赖，对每一个我敢写出来的技能点，都能自信满满地与人对谈。 目前的计划是按照我最近一段时间更新公众号的频率，大约十天更新一篇，阅读源码主要使用的工具和方式是： GitHub 上的 android/platform_frameworks_base 等源码配合 Chrome 插件 insight.io 自己电脑上搭建的 OpenGrok 浏览 Android 7.1.2 源码 http://androidxref.com/7.1.1_r6/ 大致思路就是这样，实践一阵试试。不知道自顶向下的方法是否走得下去，要是实在不行，还是乖乖回去跟着老罗的脚步学习吧。 开篇，就当先立个 Flag 在这里，万一坚持做下去了呢，牛皮都不敢吹还哪敢做成什么事啊，最次也「世上无难事，只要肯放弃」嘛。对此有兴趣的朋友，请关注我的微信公众号「闷骚的程序员」，一起 Read The F*cking Android Source Code。 后续相关的系列文章，会在 GitHub 仓库 mzlogin/rtfsc-android 汇总更新，欢迎关注，看我起高楼，或是啪啪打脸。</summary></entry></feed>